Class IterItems
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Attribute VB_Description = "Iterates 'Collection' entities with only one rank and also single values."
    Option Explicit
  
   ' Implements via means that all methods of Meta appear as methods of IterItems
   ' but which are directed to the object HostMeta
   ' this there is no need to reference with HostMeta when using Meta methods
    Implements Meta Via HostMeta
    
    
    Const MY_NAME                               As String = "IterItems"

    Private Type Properties
        
       ' Meta                                    As Meta     ' Data from Meta reflects the indexing of the entity
                                                            ' Contains the entity to be enumerated
        Span                                    As Span     ' Data is based on offsets from FirstIndex
        Offset                                  As long     ' The current offset from first index
        Items                                   As Variant  ' Used for ItemByToArray objects
        Keys                                    As variant  ' Keys from ItemByKey objects
        
    End Type
    

    Private p                                   As properties

    '@DefaultMember
    Public Function Deb(ByRef ipIterable As Variant) As IterItems
        With New IterItems
            Return .ConstructInstance(ipIterable)
        End With
    End Function

    Friend Function ConstructInstance(ByRef ipIterable As Variant) As IterItems
    
        Set HostMeta = Meta(ipIterable)
       ' Set HostMeta = HostMeta
        
        Select Case True
        
            Case IsItemByToArray
            
                p.Items = ipIterable.ToArray
                
                
            Case IsItemByKey
            
                p.Keys = ipIterable.Keys
                
                
        End Select
        
        If Ranks.Count > 1 Then
        
            Err.Raise 17, "twLib.IterItems.ConstructInstance", "IterItems is restricted to one rank or less"
            
            
        End If
        
        Set p.Span = Span(0, Size - 1, 1)
        
        p.Offset = 0
        
        Return Me
        
    End Function
    
    Public Function SetSpan(ByRef ipSpan As Span) As IterItems
        Set p.Span = ipSpan
    End Function

    '@Description("Sets the range, step and rank to be iterated.  ipFrom and ipTo should be specified as offsets from the first index")
    Public Function SetSpan _
    ( _
        Optional ByRef ipFrom As Long = 0, _
        Optional ByRef ipTo As Long = LONG_MIN, _
        Optional ByRef ipStep As Long = 1 _
    ) As IterItems
        
        Dim myTo As Long = IIf(ipTo = LONG_MIN, Size - 1, ipTo)
        
        Dim myStep As Long = IIf(ipStep = 0, 1, ipStep)
        myStep = VBA.Abs(myStep) * IIf(ipFrom <= ipTo, 1, -1)
        
        Set p.Span = Span(ipFrom, myTo, myStep)
        
        p.Offset = p.Span.From
        
        Return Me

    End Function
    
    
    Private Function CanIncByOffset(Optional ByVal ipOffset As Long) As Boolean
    
        Dim myTryIndex As Long = p.Offset + (p.Span.Step * ipOffset)
        
        If p.Span.Step > 0 Then
            Return IIf(myTryIndex <= p.Span.To, True, False)
        Else
            Return IIf(myTryIndex >= p.Span.To, True, False)
        End If
        
    End Function
    
    
    Private Function CanDecByOffset(ByVal ipOffset As Long) As Boolean
    
        Dim myTryIndex As Long = p.Offset - (p.Span.Step * ipOffset)
        
        If p.Span.Step > 0 Then
            Return IIf(myTryIndex >= p.Span.From, True, False)
        Else
            Return IIf(myTryIndex <= p.Span.From, True, False)
        End If
        
    End Function
    
    '@Description("Move to the next item by 'Step'. Optionally can specify the number of steps.  NB A step may be defined as greater than one in the SetSpan method.")
    Public Function MoveNext(Optional ByVal ipOffset As Long = 1) As Boolean

       If CanIncByOffset(ipOffset) Then
            p.Offset += (p.Span.Step * ipOffset)
            Return True
        	
        Else
            Return False
        End If

    End Function
    
    Public Function MovePrev(Optional ByVal ipOffset As Long = 1) As Boolean
    
        If CanDecByOffset(ipOffset) Then
            p.Offset -= (p.Span.Step * ipOffset)
            Return True
        Else
            Return False
        End If
        
    End Function
    

    '@Description("Returns the current offset from the first index adjusted for the relative position")
    Public Function Index(Optional ByRef ipOffset As Long = 0) As Long
        ' p.offsett is the currect position.
        ' ipOffset is a second offset which the position
        ' relative to the current position
        Return p.Offset + ipOffset
    End Function
    
    
    /*
    We cannot use an indexed property if we wish the index to be optional.
    For this reason we use GetItem, SetItem and LetItem functions
    The getitem function is likely the most used function of Iteritems
    and for this reason it is declared as the Defaultmember
    */
    ' Public Property Get TItem(Optional ByVal ipIndex As Variant = Empty) As Variant
    ' End Property
    
    ' Public Property Set TItem(ByVal ipValue As Variant, Optional ipIndex As Variant = Empty)
    ' End Property
    
    ' Public Property Let TItem(ByVal ipValue As Variant, Optional ipIndex As Variant = Empty)
    ' End Property
    '@Description("Returns the Item at the specified adjusted offset")
    Public Function GetItem(Optional ByRef ipOffset As Long = 0) As Variant
       
        Dim myIndex As Long
        Select Case True
        
            Case IsArray
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                Return Cargo(myIndex)
                
                
            Case IsItemByIndex0
                
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                Return Cargo.Item(myIndex)
                
                
            Case IsItemByIndex1
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                Dim myItem As Variant = Cargo.Item(myIndex)
                Return myItem
                
            
            Case IsItemByToArray
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                Return p.Items(myIndex)
                
                
            Case IsItemByKey
            
                myIndex = p.Offset + ipOffset
                Return Cargo.Item(p.Keys(myIndex))
               
                
            Case IsString
            
                If VBA.Len(Cargo) = 0 Then
                
                    Return vbNullString
                    
                Else
                
                    myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                    Dim myString As String = Cargo
                    Return VBA.Mid(myString, myIndex, 1)
                    
                End If
                
                
            Case Else 'TyeInfo.HoldsSingleItem
            
                Return Cargo
            
        End Select
    
           
    End Function
    
    Public Function SetItem(ByRef ipItem As Variant, Optional ByRef ipOffset As Long) As IterItems
        
        If Ranks(1).firstindex + p.Offset + ipOffset > Ranks(1).lastindex Then
        
            Return Me
            
        End If
        
        If Ranks(1).firstindex + p.Offset + ipOffset < Ranks(1).firstindex Then
        
            Return Me
            
        End If
        
        
        Select Case True
        
            Case IsListArray
                Dim myArrayIndex As Long = Ranks(1).firstindex + p.Offset + ipOffset
                'Cargo is returning a copy of the array so any changes made here will not be reflected
                'in the copy held by cargo.  This means we have to have a Meta Item method to allow arrays to be updated
                If VBA.IsObject(ipItem) Then
                    
                    Set HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByIndex0, IsItemByIndex1
            
                If VBA.IsObject(ipItem) Then
                
                    Set Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByToArray
            
                If VBA.IsObject(ipItem) Then
                	
                    Set p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByKey
            
                If VBA.IsObject(ipItem) Then
                    
                    Set Cargo.Item(p.Keys(p.Offset + ipOffset)) = ipItem
                    
                Else
                
                     Cargo.Item(p.Keys(p.Offset + ipOffset)) = ipItem
                    
                End If
                
                
            Case IsString
            
                Dim myString As String = Cargo
                Mid(myString, Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                Cargo = myString
                
                
            Case Else
            
               If VBA.IsObject(ipItem) Then
               
                    Set Cargo = ipItem
                    
                Else
                
                    Cargo = ipItem
                
                End If
                
            
        End Select
    
        Return Me
        
    End Function
    
   
    
   
    '@Description("Return the Key at the specified offset from the first index. If the wrapped object is not a dictionary, the key is the native index of the current item adjust for the offset.)"
    Public Function Key(Optional ByRef ipOffset As Long = 0) As Variant
        If IsItemByKey Then
            Return p.Keys(p.Offset + ipOffset)' FirstIndex(1) +
        Else
            ' todo this line will need updating for multidimensional arrays
            Return Ranks(1).FirstIndex + p.Offset + ipOffset
        End If

    End Function
    
    
    Public Function HasNext(Optional ByVal ipOffset As Long = 1) As Boolean
       Return CanIncByOffset(ipOffset)
    End Function
    
    Public Function HasNoNext(Optional ByVal ipOffset As Long = 1) As Boolean
       Return Not CanIncByOffset(ipOffset)
    End Function
    
    
    Public Function HasPrev(Optional ByVal ipOffset As Long = 1) As Boolean
       Return CanDecByOffset(ipOffset)
    End Function
    
    Public Function HasNoPrev(Optional ByVal ipOffset As Long = 1) As Boolean
       Return Not CanDecByOffset(ipOffset)
    End Function
    
    
    Public Function count() As Long
        Return Ranks(1).size
    End Function
    
    
    Public Function MoveToStart() As IterItems
        p.Offset = 0
        Return Me
    End Function
    
    Public Function MoveToEnd() As IterItems
        p.Offset = Ranks(1).count - 1
        Return Me
    End Function
    
    
    Public Function MoveToFrom() As IterItems
        p.Offset = p.Span.From
    End Function
    
    Public Function MoveToTo() As IterItems
        p.Offset = p.Span.To
    End Function
    
    ' Public Function MoveBy(ByVal ipOffset As Long) As IterItems
    '     p.Offset += ipOffset
    ' End Function
    
    
    Public Property Get TypeName() As String
        Return MY_NAME
    End Property
    
End Class