[ ClassId ("2C4F67FE-4D35-46D6-BAEA-E69A81EDB1B6") ]
[ InterfaceId ("8FECAC17-CC3D-4401-B270-D2F957DF456E") ]
[ COMCreatable (False) ]
Private Class BaseForm

    Implements BaseControlRect Via BaseControlRect

    [ Serialize (False) ]
        Private FormControlContext As WindowsControls.WindowsFormContext
    [ Serialize (False) ]
        Private WithEvents RootWindowElementBase As WindowsControls.WindowElement
    [ Description ("A unique GUID that is used for associating a class with a form") ]
        Public FormDesignerId As String             ' FIXME should support GUID datatype
    [ Serialize (False), Description ("A collection of all controls attached to this form") ]
        ' FIXME currently can't be ReadOnly because of how this is populated internally through IDispatch
        Public Controls As Object 'WindowsControls.WindowsControlsCollection  changed to Object to avoid unnecessary COM exposure of WindowsControls.WindowsControlsCollection
    [ Description ("Adjusts the left position of this form, only if the StartupPosition is tbStartUpManual") ]
        Public ReadOnly HasDC As Boolean = True
    [ Description ("") ]
        Public MousePointer As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
    [ Serialize (True, "MouseIcon") ]
    [ CustomDesigner ("designer_IconBytes") ]
        Private ReadOnly MouseIconINIT() As Byte
    [ Serialize (False) ]
        Public MouseIcon As StdPicture
    [ Description ("") ]
        ' VB6 allows changing the BorderStyle value at RUNTIME, but it seems to do nothing?
        Public BorderStyle As FormBorderStyleConstants = FormBorderStyleConstants.vbSizable
    [ Description ("") ]
        Public ReadOnly StartupPosition As StartUpPositionConstants = StartUpPositionConstants.vbStartUpScreen
    [ Description ("") ]
        Public ReadOnly ControlBox As Boolean = True
    [ Description ("") ]
        Public ReadOnly MaxButton As Boolean = True
    [ Description ("") ]
        Public ReadOnly MinButton As Boolean = True
    [ Description ("") ]
        Public ReadOnly ShowInTaskbar As Boolean = True
    [ Description ("") ]
        Public Moveable As Boolean = True
    [ Description ("") ]
        Public KeyPreview As Boolean = False
    [ Description ("") ]
        ' Exists in VB6, but doesn't seem to have an effect on forms.
        Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d

    [ Description ("Adjusts the visibility of this control at runtime") ]
    [ Serialize (True, "Visible") ]
        Private VisibleINIT As Boolean = True
    [ Description ("") ]
    [ Serialize (True, "Enabled") ]
        Private EnabledINIT As Boolean = True
    [ Description ("") ]
    [ Serialize (True, "Caption") ]
        Private CaptionINIT As String
    [ Description ("") ]
    [ Serialize (True, "WindowState") ]
        ' FIXME this currently has to be public due to the way the form engine accesses it.
        Public WindowStateINIT As FormWindowStateConstants = FormWindowStateConstants.vbNormal

        Private CurrentBackBrush As LongPtr
        Private CurrentBackBrushColor As OLE_COLOR

    Sub New()
        'Debug.Print "BaseForm.New"
        Me.VisibleINIT = True
        Me.EnabledINIT = True
        
        Set Me.BaseControlRect = New BaseControlRect(ControlTypeConstants.vbForm)
    End Sub
    
    Sub Class_Terminate()
        If Me.CurrentBackBrush <> 0 Then WindowsAPI.GDI32_DeleteObject(Me.CurrentBackBrush)
    End Sub
    
    Friend Function CreateRootWindowElement(ByVal _ControlContext As stdole.IUnknown, _
                                                ByVal ClassName As String, _
                                                ByVal WindowStyles As Long, ByVal ExtendedStyles As Long, _
                                                Optional ByVal SubClass As Boolean = False) As WindowElement
        Set Me.ControlContext = _ControlContext ' FIXME passed as IUnknown to prevent COM exposure of type
        Set Me.FormControlContext = _ControlContext
        WindowStyles += If(Me.EnabledINIT, 0, WS_DISABLED)
        WindowStyles += If(Me.VisibleINIT, WS_VISIBLE, 0)
        Set Me.RootWindowElementBase = ControlContext.CreateWindowElement(ClassName, Me.CaptionINIT, WindowStyles, ExtendedStyles, SubClass)

        If IsArrayInitialized(Me.MouseIconINIT) AndAlso (UBound(Me.MouseIconINIT) > -1) Then
            ' LoadPicture can now be passed a byte-array containing an in-memory stream
            On Error Resume Next
            Set Me.MouseIcon = Global.LoadPicture(Me.MouseIconINIT)
        End If
        
        Return Me.RootWindowElementBase
    End Function
    
    Friend Function CreateBackBrush(ByVal Color As OLE_COLOR) As LongPtr
        If Color <> Me.CurrentBackBrushColor Then
            If Me.CurrentBackBrush <> 0 Then WindowsAPI.GDI32_DeleteObject(Me.CurrentBackBrush)
                Me.CurrentBackBrush = WindowsAPI.GDI32_CreateSolidBrushColor(TranslateColor(Color))
                Me.CurrentBackBrushColor = Color
        End If
        Return Me.CurrentBackBrush
    End Function
    
    [ Serialize (False) ]
    Public Property Get WindowState() As FormWindowStateConstants
        Me.ControlContext.EnsureFormIsLoaded()
        Dim placement As WINDOWPLACEMENT = USER32_GetWindowPlacement(Me.RootWindowElementBase)
        Select Case placement.showCmd
            Case SW_SHOWMAXIMIZED
                WindowState = FormWindowStateConstants.vbMaximized
            Case SW_SHOWMINIMIZED
                WindowState = FormWindowStateConstants.vbMinimized
            Case Else
                WindowState = FormWindowStateConstants.vbNormal
        End Select
    End Property
    
    [ Serialize (False) ]
    Public Property Let WindowState(ByVal NewValue As FormWindowStateConstants)
        Me.ControlContext.EnsureFormIsLoaded()
        Select Case NewValue
            Case FormWindowStateConstants.vbMaximized
                USER32_ShowWindow(Me.RootWindowElementBase, SW_MAXIMIZE)
            Case FormWindowStateConstants.vbMinimized
                USER32_ShowWindow(Me.RootWindowElementBase, SW_MINIMIZE)
            Case FormWindowStateConstants.vbNormal
                USER32_ShowWindow(Me.RootWindowElementBase, SW_RESTORE)
            Case Else
                Err.Raise 5
        End Select
    End Property
    
    [ Serialize (False) ]
    [ Description ("") ]
    Property Get Caption() As String
        Me.ControlContext.EnsureFormIsLoaded()
        Return WindowsAPI.USER32_GetWindowText(Me.RootWindowElementBase)
    End Property
    
    [ Serialize (False) ]
    [ Description ("") ]
    Property Let Caption(Value As String)
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_SetWindowText(Me.RootWindowElementBase, Value)
    End Property
    
    [ Serialize (False) ]
    [ Description ("") ]
    Property Get Enabled() As Boolean
        Me.ControlContext.EnsureFormIsLoaded()
        Return Not WindowsAPI.USER32_GetStyleFlag(Me.RootWindowElementBase, WS_DISABLED)
    End Property
    
    [ Serialize (False) ]
    [ Description ("") ]
    Property Let Enabled(Value As Boolean)
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_EnableWindow(Me.RootWindowElementBase, Value)
    End Property
    
    [ Serialize (False) ]
    [ Description ("Adjusts the visibility of this control at runtime") ]
    Property Get Visible() As Boolean
        Me.ControlContext.EnsureFormIsLoaded()
        Return WindowsAPI.USER32_GetStyleFlag(Me.RootWindowElementBase, WS_VISIBLE)
    End Property
    
    [ Serialize (False) ]
    [ Description ("Adjusts the visibility of this control at runtime") ]
    Property Let Visible(Value As Boolean)
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_SetStyleFlag(Me.RootWindowElementBase, WS_VISIBLE, Value)
        Refresh()
    End Property

    Sub Refresh()
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_RedrawWindow(Me.RootWindowElementBase, 0, 0, RDW_ERASE Or RDW_INVALIDATE)
    End Sub

    Public Sub Show(Optional ByVal Modal As FormShowConstants)
        If Modal = FormShowConstants.vbModeless Then
            Err.Raise 5, , "Sorry, twinBASIC doesn't yet support non-modal forms.  To show a modal form use Show(vbModal)"
        End If
        Me.ControlContext.EnsureFormIsLoaded()
        Me.FormControlContext.Show()
    End Sub
            
    Public Sub Close()
        Me.ControlContext.EnsureFormIsLoaded()
        Me.FormControlContext.Close()
    End Sub

    Public Sub ScheduleCallback(ByVal Callback As IScheduledCallback)
        Me.ControlContext.ScheduleCallback(ObjPtr(Callback))
    End Sub

    Public Function CreateDeferredDispatchWrapper(ByRef Object As Object) As Object
    	Return Me.ControlContext.CreateDeferredDispatchWrapper(Object)
    End Function
        
    Private Sub OnTouchedFormProperties() _
            Handles Controls.OnPropertyGet, _
                    HasDC.OnPropertyGet, _
                    MousePointer.OnPropertyGet, _
                    MousePointer.OnPropertyLet, _
                    BorderStyle.OnPropertyGet, _
                    BorderStyle.OnPropertyLet, _
                    StartupPosition.OnPropertyGet, _
                    ControlBox.OnPropertyGet, _
                    MaxButton.OnPropertyGet, _
                    MinButton.OnPropertyGet, _
                    ShowInTaskbar.OnPropertyGet, _
                    Moveable.OnPropertyGet, _
                    Moveable.OnPropertyLet, _
                    KeyPreview.OnPropertyGet, _
                    KeyPreview.OnPropertyLet, _
                    Appearance.OnPropertyGet, _
                    Appearance.OnPropertyLet

        If Me.ControlContext IsNot Nothing Then Me.ControlContext.EnsureFormIsLoaded()
    End Sub

End Class