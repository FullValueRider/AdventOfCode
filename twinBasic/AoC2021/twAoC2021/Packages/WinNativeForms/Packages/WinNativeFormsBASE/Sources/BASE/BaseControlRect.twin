[ ClassId ("8B0BA607-69F9-4F00-8A79-A28449E7182B") ]
[ InterfaceId ("39333942-9249-43E7-BABC-EFD97CF98074") ]
[ COMCreatable (False) ]
Private Class BaseControlRect
    
    Implements BaseControl Via BaseControl

    [ Description ("Adjusts the left position of this control, in pixels, relative to the container") ]
    [ BindOnlyIfNoArguments ]
'    [ DispId (-850) ]
        Public Left As Double
        Attribute Left.VB_VarUserMemId = -850
    [ Description ("Adjusts top position of this control, in pixels, relative to the container") ]
'    [ DispId (-851) ]
        Public Top As Double
        Attribute Top.VB_VarUserMemId = -851
    [ Description ("Adjusts the width of this control, in pixels") ]
'    [ DispId (-852) ]
        Public Width As Double
        Attribute Width.VB_VarUserMemId = -852
    [ Description ("Adjusts the height of this control, in pixels") ]
'    [ DispId (-853) ]
        Public Height As Double
        Attribute Height.VB_VarUserMemId = -853

        Private LeftCached As Double
        Private TopCached As Double
        Private WidthCached As Double
        Private HeightCached As Double
     
    Public Function IsInRect(ByVal X As Double, ByVal Y As Double) As Boolean
    	Return (X >= 0) AndAlso (Y >= 0) AndAlso (X <= Width) AndAlso (Y <= Height)
    End Function
     
    Sub New(ByVal ControlType As ControlTypeConstants)
        Set Me.BaseControl = New BaseControl(ControlType)
    End Sub

    Private Sub OnTouchedFormProperties() _
            Handles Left.OnPropertyGet, _
                    Top.OnPropertyGet, _
                    Width.OnPropertyGet, _
                    Height.OnPropertyGet

        Me.ControlContext.EnsureFormIsLoaded()
    End Sub
 
    Private Sub OnPropertyChanged_LEFT() _
            Handles Left.OnPropertyLet

        Me.ControlContext.EnsureFormIsLoaded()
        If Left <> LeftCached Then
            If Me.ControlContext IsNot Nothing Then Me.ControlContext.ChangedPosition()
            LeftCached = Left
        End If
    End Sub

    Private Sub OnPropertyChanged_TOP() _
            Handles Top.OnPropertyLet

        Me.ControlContext.EnsureFormIsLoaded()
        If Top <> TopCached Then
            If Me.ControlContext IsNot Nothing Then Me.ControlContext.ChangedPosition()
            TopCached = Top
        End If
    End Sub

    Private Sub OnPropertyChanged_WIDTH() _
            Handles Width.OnPropertyLet

        Me.ControlContext.EnsureFormIsLoaded()
        If Width <> WidthCached Then
            If Me.ControlContext IsNot Nothing Then Me.ControlContext.ChangedPosition()
            WidthCached = Width
        End If
    End Sub

    Private Sub OnPropertyChanged_HEIGHT() _
            Handles Height.OnPropertyLet

        Me.ControlContext.EnsureFormIsLoaded()
        If Height <> HeightCached Then
            If Me.ControlContext IsNot Nothing Then Me.ControlContext.ChangedPosition()
            HeightCached = Height
        End If
    End Sub

    Public Sub Move(ByVal Left As Single, Optional ByVal Top As Variant, Optional ByVal Width As Variant, Optional ByVal Height As Variant)
    	
        Me.ControlContext.EnsureFormIsLoaded()
        If IsMissing(Top) Then
        	Top = Me.Top
        End If

        If IsMissing(Width) Then
        	Width = Me.Width
        End If
        
        If IsMissing(Height) Then
        	Height = Me.Height
        End If

        If (Me.Left <> Left) OrElse _   
            (Me.Top <> Top) OrElse _
            (Me.Width <> Width) OrElse _
            (Me.Height <> Height) Then
            
            Me.Left = Left
            Me.LeftCached = Left
            Me.Top = Top
            Me.TopCached = Top
            Me.Width = Width
            Me.WidthCached = Width
            Me.Height = Height
            Me.HeightCached = Height

            If Me.ControlContext IsNot Nothing Then Me.ControlContext.ChangedPosition()
        End If
    End Sub

End Class