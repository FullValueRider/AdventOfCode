[ ClassId ("5D93AFFC-1494-417B-A383-3759B983E1CF") ]
[ InterfaceId ("D66C7E51-3D21-48A8-8E9C-6F9A5872D7E1") ]
[ COMCreatable (False) ]
Private Class BaseControlNotFocusable2

    Implements BaseControlRect Via BaseControlRect

    ' like BaseControlFocusable, but without TabStop

    [ Serialize (False) ]
        Private WithEvents RootWindowElementBase As WindowsControls.WindowElement
    [ Description ("Determines how the sides of this control are anchored to its container") ]
        Public ReadOnly Anchors As Anchors = New Anchors
    [ Description ("Adjusts how the control is docked inside of its container") ]
        Public ReadOnly Dock As VBRUN.DockModeConstants = VBRUN.DockModeConstants.vbDockNone
    [ Description ("Adjusts the TAB key order of this control at runtime") ]
        Public TabIndex As Long
    [ Description ("") ]
        Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d
    [ Description ("") ]
        Public MousePointer As VBRUN.MousePointerConstants = VBRUN.MousePointerConstants.vbDefault
    [ Serialize (True, "MouseIcon") ]
    [ CustomDesigner ("designer_IconBytes") ]
        Private ReadOnly MouseIconINIT() As Byte
    [ Serialize (False) ]
        Public MouseIcon As StdPicture
        
        Public ToolTipText As String
        Public ReadOnly VisualStyles As Boolean = True

    ' FIXME need a font picker, then hide these from the property sheet
        Public FontBold As Boolean = False
        Public FontItalic As Boolean = False
        Public FontName As String = "Segoe UI"
        Public FontSize As Single = 8
        Public FontStrikethru As Boolean = False
        Public FontUnderline As Boolean = False

    [ Description ("Adjusts the visibility of this control at runtime") ]
    [ Serialize (True, "Visible") ]
        Private VisibleINIT As Boolean = True
        [ Description ("") ]
    [ Serialize (True, "Enabled") ]
        Private EnabledINIT As Boolean = True
        
    [ Serialize (False) ]
        Public Font As StdFont
            
        Private CurrentFontHandle As LongPtr
        Private CurrentBackBrush As LongPtr
        Private CurrentBackBrushColor As OLE_COLOR

    Sub New(ByVal ControlType As ControlTypeConstants)
       Set Me.BaseControlRect = New BaseControlRect(ControlType)
    End Sub
    
    Sub Class_Terminate()
       WindowsAPI.GDI32_DeleteObject(Me.CurrentFontHandle)
       WindowsAPI.GDI32_DeleteObject(Me.CurrentBackBrush)
    End Sub
        
    [ Serialize (False) ]
    [ Description ("") ]
    Property Get Enabled() As Boolean
        Me.ControlContext.EnsureFormIsLoaded()
        Return Not WindowsAPI.USER32_GetStyleFlag(Me.RootWindowElementBase, WS_DISABLED)
    End Property
    
    [ Serialize (False) ]
    [ Description ("") ]
    Property Let Enabled(Value As Boolean)
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_EnableWindow(Me.RootWindowElementBase, Value)
    End Property
    
    [ Serialize (False) ]
    [ Description ("Adjusts the visibility of this control at runtime") ]
    Property Get Visible() As Boolean
        Me.ControlContext.EnsureFormIsLoaded()
        Return WindowsAPI.USER32_GetStyleFlag(Me.RootWindowElementBase, WS_VISIBLE)
    End Property
    
    [ Serialize (False) ]
    [ Description ("Adjusts the visibility of this control at runtime") ]
    Property Let Visible(Value As Boolean)
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_ShowWindow(Me.RootWindowElementBase, CLng(If(Value, SW_NORMAL, SW_HIDE)))
        
        If Me.Dock <> DockModeConstants.vbDockNone Then
            ' FIXME bodge, this forces layout to be recalculated
            WindowsAPI.USER32_SendMessageHandle(WindowsAPI.USER32_GetParent(Me.RootWindowElementBase), WM_SIZE, -1, 0)
        End If
    End Property
    
    Friend Function CreateRootWindowElement(ByVal _ControlContext As stdole.IUnknown, _
                                        ByVal ClassName As String, ByVal Caption As String, _
                                        ByVal WindowStyles As Long, ByVal ExtendedStyles As Long, _
                                        Optional ByVal SubClass As Boolean = False) As WindowElement
        Set Me.ControlContext = _ControlContext ' FIXME passed as IUnknown to prevent COM exposure of type
        WindowStyles += If(Me.EnabledINIT, 0, WS_DISABLED)
        WindowStyles += If(Me.VisibleINIT, WS_VISIBLE, 0)
        Set Me.RootWindowElementBase = ControlContext.CreateWindowElement(ClassName, Caption, WindowStyles, ExtendedStyles, SubClass)

        If IsArrayInitialized(Me.MouseIconINIT) AndAlso (UBound(Me.MouseIconINIT) > -1) Then
            ' LoadPicture can now be passed a byte-array containing an in-memory stream
            On Error Resume Next
            Set Me.MouseIcon = Global.LoadPicture(Me.MouseIconINIT)
        End If
        
        Return Me.RootWindowElementBase
    End Function
    
    Private Sub HandleCreate() _
            Handles RootWindowElementBase.Create
            
        SyncFontProperties()
    End Sub
    
    Private Sub HandleDPIChange() _
            Handles RootWindowElementBase.DPIChange
         
        SyncFontProperties()
    End Sub
         
    Private Sub SyncFont() _
           Handles Font.OnPropertySet

        Dim oldFontHandle As LongPtr = Me.CurrentFontHandle
        Me.CurrentFontHandle = WindowsAPI.USER32_SetFont(Me.RootWindowElementBase, Me.Font)
        If oldFontHandle <> 0 Then WindowsAPI.GDI32_DeleteObject oldFontHandle
    End Sub

    Friend Function CreateBackBrush(ByVal Color As OLE_COLOR) As LongPtr
        If Color <> Me.CurrentBackBrushColor Then
            If Me.CurrentBackBrush <> 0 Then WindowsAPI.GDI32_DeleteObject(Me.CurrentBackBrush)
                Me.CurrentBackBrush = WindowsAPI.GDI32_CreateSolidBrushColor(TranslateColor(Color))
                Me.CurrentBackBrushColor = Color
        End If
        Return Me.CurrentBackBrush
    End Function

    Private Sub InitializeOLEFont()
        Dim NewFont As StdFont = New StdFont
        With NewFont
            .Bold = Me.FontBold
            .Italic = Me.FontItalic
            .Name = Me.FontName
            .Size = Me.FontSize
            .Strikethrough = Me.FontStrikethru
            .Underline = Me.FontUnderline
        End With
        Set Me.Font = NewFont
    End Sub
    
    Friend Function GetFontMetrics() As TEXTMETRIC
        If Me.Font Is Nothing Then
            InitializeOLEFont
        End If
        
        Dim font As IFont = Me.Font
        Dim hdc As LongPtr = WindowsAPI.GDI32_CreateCompatibleDC()
        font.SetRatio(RootWindowElementBase.DPI, 2540)
        Dim oldFont As LongPtr = WindowsAPI.GDI32_SelectObject(hdc, font.hFont)
        WindowsAPI.GDI32_GetTextMetrics(hdc, GetFontMetrics)
        WindowsAPI.GDI32_SelectObject(hdc, oldFont)
		WindowsAPI.GDI32_DeleteDC(hdc)
    End Function
    
    Private Sub SyncFontProperties() _
            Handles FontBold.OnPropertyLet, _
                    FontItalic.OnPropertyLet, _
                    FontName.OnPropertyLet, _
                    FontSize.OnPropertyLet, _
                    FontStrikethru.OnPropertyLet, _
                    FontUnderline.OnPropertyLet
                    
        InitializeOLEFont()
        SyncFont()
        Refresh()
    End Sub
    
    Private Sub OnPropertyChanged() _
            Handles Appearance.OnPropertyLet
                    
        Me.ControlContext.EnsureFormIsLoaded()
        Err.Raise 5, , "Sorry, tB does not support setting this property at runtime YET"
    End Sub
    
    Public Sub SetFocus()
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_SetFocus(Me.RootWindowElementBase)
    End Sub
    
    Public Sub Refresh()
        Me.ControlContext.EnsureFormIsLoaded()
        WindowsAPI.USER32_RedrawWindow(Me.RootWindowElementBase, 0, 0, RDW_ERASE Or RDW_INVALIDATE)
    End Sub

    Friend Function SubClassWindowElement(ByVal hWnd As LongPtr) As stdole.IUnknown
    	Return Me.ControlContext.SubClassWindowElement(hWnd)
    End Function
    
    Public Sub ScheduleCallback(ByVal Callback As IScheduledCallback)
        Me.ControlContext.ScheduleCallback(ObjPtr(Callback))
    End Sub

    Public Function CreateDeferredDispatchWrapper(ByRef Object As Object) As Object
    	Return Me.ControlContext.CreateDeferredDispatchWrapper(Object)
    End Function

    [ DispId (-856) ]
    Public Property Get Container() As Object
        On Error Resume Next
        Me.ControlContext.EnsureFormIsLoaded()
    	Return Me.RootWindowElementBase.Container
    End Property

    Private Sub OnTouchedFormProperties() _
            Handles Anchors.OnPropertyGet, _
                    Dock.OnPropertyGet, _
                    TabIndex.OnPropertyGet, _
                    TabIndex.OnPropertyLet, _
                    MousePointer.OnPropertyGet, _
                    MousePointer.OnPropertyLet, _
                    Appearance.OnPropertyGet, _
                    VisualStyles.OnPropertyGet, _
                    FontBold.OnPropertyGet, _
                    FontItalic.OnPropertyGet, _
                    FontName.OnPropertyGet, _
                    FontSize.OnPropertyGet, _
                    FontStrikethru.OnPropertyGet, _
                    FontUnderline.OnPropertyGet, _
                    Font.OnPropertyGet

        If Me.ControlContext IsNot Nothing Then Me.ControlContext.EnsureFormIsLoaded()
    End Sub
    
    Private Sub ToolTipChanged() Handles ToolTipText.OnPropertyLet
        Me.RootWindowElementBase.ToolTipChanged()
    End Sub

End Class