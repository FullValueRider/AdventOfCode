[ Description ("A Win32 native PictureBox") ]
[ WindowsControl ("/miscellaneous/PictureBoxNew.png") ]
[ ClassId ("33AD4ED0-6699-11CF-B70C-00AA0060D393") ]
[ InterfaceId ("04005DD2-51C7-4DC0-94CB-95FC240AC88E") ]    ' FIXME implement {33AD4ED1-6699-11CF-B70C-00AA0060D393} for backcompat
[ COMCreatable (False) ]
Class PictureBox
        
    #Region "INHERITANCE"
    
        [ WithDispatchForwarding ] Implements Control
        Implements WindowsControls.IWindowsControl
        Implements WinNativeFormsBase.BaseControlFocusableNoFont Via _BaseControl = New WinNativeFormsBase.BaseControlFocusableNoFont(ControlTypeConstants.vbPictureBox)
        Implements GraphicsBase Via _BaseGraphics = New GraphicsBase()
        Implements ITwinBasicDesignerExtensions
 
    #End Region
        
    #Region "STATE"

        [ Description ("") ]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbFixedSingleBorder
        [ Description ("") ]
            Public Appearance As VBRUN.AppearanceConstants = VBRUN.AppearanceConstants.vbAppear3d

        [ Serialize (True, "Picture") ]
        [ CustomDesigner ("designer_PictureBytes") ]
            Private ReadOnly PictureINIT() As Byte
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private IsDesignMode As Boolean
            
        [ Unimplemented ]
        [ Serialize (True, "DragIcon") ]
        [ CustomDesigner ("designer_PictureBytes") ]
            Private ReadOnly DragIconINIT() As Byte
        [ Unimplemented ]
        [ Serialize (False) ]
            Public DragIcon As StdPicture
        [ Unimplemented ]
            Public AutoSize As Boolean
        [ Unimplemented ]
            Public CausesValidation As Boolean = True
        [ Unimplemented ]
            Public DataField As String
        [ Unimplemented ]
            Public DataFormat As StdDataFormat
        [ Unimplemented ]
            Public DataMember As String
        [ Unimplemented ]
        [ Serialize (True, "DataSource") ]          ' Any string value is allowed, gets resolved at runtime to a Form.Controls(DataSourceName)
            Public DataSourceINIT As String
        [ Unimplemented ]
            Public DragMode As VBRUN.DragModeConstants
        [ Unimplemented ]
            Public HelpContextID As Long
        [ Unimplemented ]
            Public LinkItem As String
        [ Unimplemented ]
            Public LinkMode As VBRUN.LinkModeConstants
        [ Unimplemented ]
            Public LinkTopic As String
        [ Unimplemented ]
            Public LinkTimeout As Long = 50
        [ Unimplemented ]
            Public OLEDragMode As VBRUN.OLEDragConstants
        [ Unimplemented ]
            Public OLEDropMode As VBRUN.OLEDropConstants
        [ Unimplemented ]
            Public ScaleHeight As Double
        [ Unimplemented ]
            Public ScaleLeft As Double
        [ Unimplemented ]
            Public ScaleTop As Double
        [ Unimplemented ]
            Public ScaleWidth As Double
        [ Unimplemented ]
            Public ScaleMode As VBRUN.ScaleModeConstants = VBRUN.ScaleModeConstants.vbTwips
        [ Unimplemented ]
            Public RightToLeft As Boolean
        [ Unimplemented ]
            Public WhatsThisHelpID As Long
        [ Unimplemented ]
            Public Negotiate As Boolean             ' this appears in the form designer, but not in the class interface??

            Public ToolTipText As String
            
        [ Serialize (False) ]
        [ Unimplemented ]
            Public Align As VBRUN.AlignConstants        ' FIXME needs to reflect/update the Dock value
        [ Serialize (False) ]
        [ Unimplemented ]
            Public DataChanged As Boolean
        [ Serialize (False) ]
        [ Unimplemented ]
            Public Image As IPictureDisp            ' persistent cached bitmap
        [ Serialize (False) ]
        [ Unimplemented ]
            Public DataSource As DataSource         ' See DataSourceINIT

        [ Unimplemented ]
            Public Sub Drag(Optional ByVal Action As Variant)
            End Sub
            
        [ Unimplemented ]
            Public Sub LinkExecute(ByVal Command As String)
            End Sub

        [ Unimplemented ]
            Public Sub LinkPoke()
            End Sub
            
        [ Unimplemented ]
            Public Sub LinkRequest()
            End Sub

        [ Unimplemented ]
            Public Sub LinkSend()
            End Sub

        [ Unimplemented ]
            Public Sub OLEDrag()
            End Sub
            
        [ Unimplemented ]
            Public Sub PaintPicture(ByVal Picture As IPictureDisp, ByVal X1 As Single, ByVal Y1 As Single, Optional ByVal Width1 As Variant, Optional ByVal Height1 As Variant, Optional ByVal X2 As Variant, Optional ByVal Y2 As Variant, Optional ByVal Width2 As Variant, Optional ByVal Height2 As Variant, Optional ByVal Opcode As Variant)
            End Sub
            
        [ Unimplemented ]
            Public Function Point(ByVal X As Single, ByVal Y As Single) As Long
            End Function
            
        [ Unimplemented ]
            Public Sub Scale(ByVal Flags As Integer, Optional ByVal X1 As Variant, Optional ByVal Y1 As Variant, Optional ByVal X2 As Variant, Optional ByVal Y2 As Variant)
            End Sub

        [ Unimplemented ]
            Public Function ScaleX(ByVal Width As Single, Optional ByVal FromScale As Variant, Optional ByVal ToScale As Variant) As Single
            End Function
            
        [ Unimplemented ]
            Public Function ScaleY(ByVal Height As Single, Optional ByVal FromScale As Variant, Optional ByVal ToScale As Variant) As Single
            End Function
            
        [ Unimplemented ]
            Public Sub SetFocus()
            End Sub
            
        [ Unimplemented ]
            Public Sub ShowWhatsThis()
            End Sub
            
        [ Unimplemented ]
            Public Sub ZOrder(Optional ByVal Position As Variant)
            End Sub
    #End Region

    #Region "EVENTS"
    
        [ DefaultDesignerEvent ]
        [ Description ("") ]
            Event Click()
        [ Description ("") ]
            Event DblClick()
        [ Description ("") ]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event Initialize()
        [ Description ("") ]
            Event Paint()
        [ Description ("") ]
            Event Resize()
            
        Event Change()
        [ Unimplemented ] Event DragDrop(Source As Control, X As Single, Y As Single)
        [ Unimplemented ] Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event GotFocus()
        Event LostFocus()
        Event KeyDown(KeyCode As Integer, Shift As Integer)
        Event KeyPress(KeyAscii As Integer)
        Event KeyUp(KeyCode As Integer, Shift As Integer)
        [ Unimplemented ] Event LinkClose()
        [ Unimplemented ] Event LinkError(LinkErr As Integer)
        [ Unimplemented ] Event LinkNotify()
        [ Unimplemented ] Event LinkOpen(Cancel As Integer)
        [ Unimplemented ] Event OLECompleteDrag(Effect As Long)
        [ Unimplemented ] Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Unimplemented ] Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        [ Unimplemented ] Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        [ Unimplemented ] Event OLESetData(Data As DataObject, DataFormat As Integer)
        [ Unimplemented ] Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        [ Unimplemented ] Event Validate(Cancel As Boolean)

    #End Region
               
    #Region "MEMBERS"

        Public Sub New()
            ' This constructor is useful for allowing control inheritance
        End Sub
    
        Public Sub InitializeDefaultValues()
        	Me.TabStopINIT = False          ' For new controls this is correct.  Though for imported controls, TabStop = True is the default
        End Sub
    
        Public Sub New(Serializer As WindowsControls.SerializationInfo)
            If Not Serializer.Deserialize(Me) Then
                InitializeDefaultValues
            End If
            IsDesignMode = Serializer.IsDesignMode
        End Sub
        
        Private Sub Class_Terminate()
            'Debug.Print "PictureBox.Class_Terminate"
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize
                
            ControlContext.SetControlArrayIndex(Me.IndexINIT)
            Dim styles As Long
            Dim extendedStyles As Long
            
                styles += If(Me.ClipControls = True, WinNativeFormsBASE.WS_CLIPCHILDREN, 0)

                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If Me.Appearance = AppearanceConstants.vbAppear3d Then
                        extendedStyles += WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_CLIENTEDGE
                    Else
                        styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                    End If
                End If

            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, If(Me.HasDC, "ThunderPictureBoxDC", "ThunderPictureBox"), vbNullString, styles, extendedStyles)
        End Sub
                
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
                
            ' disconnect anything that causes a circular reference here
            Set Me.[_BaseGraphics] = Nothing
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
            
            Dim picture As StdPicture
            If IsArrayInitialized(Me.PictureINIT) AndAlso (UBound(Me.PictureINIT) > -1) Then
                ' LoadPicture can now be passed a byte-array containing an in-memory stream
                On Error Resume Next
                Set picture = Global.LoadPicture(Me.PictureINIT)
            End If
            _BaseGraphics.ChangeHDC(0, Me.hWnd, Me.RootWindowElement, picture, Me, False)
                        
            RaiseEvent Initialize()
        End Sub
        
        Private DeclareWide PtrSafe Function UpdateWindow Lib "user32" (ByVal hWnd As LongPtr) As Long
    
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            Me.RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                
                Me.[_BaseGraphics].OnPaint(ps.hdc)

                If Me.AutoRedraw = False Then
                    Dim oldDc As LongPtr = Me.[_BaseGraphics].hDC
                        RaiseEvent Paint
                    Me.[_BaseGraphics].hDC = oldDc
                End If
                
                If Me.ClipControls = True And IsDesignMode = False Then
                    ' FIXME need better method.
                    Dim Ctrl As Control
                    For Each Ctrl In Me.Parent.Controls
                        On Error Resume Next
                            Dim isContainedByUs As Boolean = False
                            isContainedByUs = Ctrl.Container Is Me
                            If isContainedByUs Then
                                WinNativeFormsBASE.WindowsAPI.RedrawWindow(Ctrl.Hwnd, 0, 0, WinNativeFormsBASE.RDW_ERASE Or WinNativeFormsBASE.RDW_INVALIDATE Or WinNativeFormsBASE.RDW_ERASENOW Or WinNativeFormsBASE.RDW_UPDATENOW Or WinNativeFormsBASE.RDW_FRAME)
                            End If
                    Next
                    On Error GoTo 0
                End If

            Me.RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event
        End Sub
        
        
        Private Sub HandleGotFocus() _
                Handles RootWindowElement.GotFocus
                
            RaiseEvent GotFocus()
        End Sub

        Private Sub HandleLostFocus() _
                Handles RootWindowElement.LostFocus
                
            RaiseEvent LostFocus()
        End Sub
        
        Private Sub HandleKeyDown(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyDown
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyDown(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
        End Sub
        
        Private Sub HandleKeyUp(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyUp
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyUp(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
        End Sub
        
        Private Sub HandleKeyPress(ByRef Key As Integer) _
                Handles RootWindowElement.KeyPress
                
            RaiseEvent KeyPress(Key)
        End Sub
        
        Private Sub HandleDoubleClick(ByVal Button As Long, ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDoubleClick
                
            RaiseEvent DblClick()
        End Sub
        
        Private Sub HandleCommand(ByVal NotificationCode As ButtonNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
        End Sub
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            BeginMouseCapture(Me.RootWindowElement)
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseUp
                
            Dim WasCaptured As Boolean = EndMouseCapture()
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            If WasCaptured And IsInRect(X, Y) Then RaiseEvent Click
        End Sub
        
        [ Serialize (False) ]
        Public Property Get hWnd() As LongPtr
            If Me.RootWindowElement IsNot Nothing Then
                Me.ControlContext.EnsureFormIsLoaded()
                Return Me.RootWindowElement.Handle
            End If
        End Property

        Private Sub OnTouchedFormProperties() _
                Handles BorderStyle.OnPropertyGet
                        
            Me.ControlContext.EnsureFormIsLoaded()
        End Sub
                
        Friend Sub InternalRaiseResize()
        	RaiseEvent Resize()
        End Sub
        
        Friend Sub InternalRaiseChange()
        	RaiseEvent Change()
        End Sub
        
        Private Sub ITwinBasicDesignerExtensions_GetPropertyExtensions(ByRef out() As String) _
                Implements ITwinBasicDesignerExtensions.GetPropertyExtensions

        End Sub

        Private Sub ITwinBasicDesignerExtensions_InvokePropertyExtension(ByVal Name As String) _
                Implements ITwinBasicDesignerExtensions.InvokePropertyExtension

        End Sub

        Private Function ITwinBasicDesignerExtensions_GetClientObject() As Object _
                Implements ITwinBasicDesignerExtensions.GetClientObject

        End Function

        Private Sub DesignerClick(ByVal X As Long, ByVal Y As Long) _
                Implements ITwinBasicDesignerExtensions.DesignerClick

        End Sub

        Private Function IsFrame() As Boolean _
                Implements ITwinBasicDesignerExtensions.IsFrame

     	    Return True
        End Function

        Private Sub ITwinBasicDesignerExtensions_DesignTimePrepareSnapshot() _
                Implements ITwinBasicDesignerExtensions.DesignTimePrepareSnapshot

        End Sub
        
        Public Sub Refresh()
            Me.ControlContext.EnsureFormIsLoaded()
            
            If Me.AutoRedraw = True Then
                Me.CopyBufferToDC(Me.RealHDC)
            Else
                WinNativeFormsBASE.WindowsAPI.USER32_RedrawWindow(Me.RootWindowElement, 0, 0, WinNativeFormsBASE.RDW_ERASE Or WinNativeFormsBASE.RDW_INVALIDATE)
            End If
        End Sub
        
        [ Serialize (False) ]
        Public Property Get Parent() As Form
            Return ControlContext.GetForm
        End Property
                        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        [ Serialize (False) ]
        [ DefaultMember ]
        Public Property Get _Default() As LongPtr
            If Me.Picture IsNot Nothing Then
            	Return Me.Picture.Handle
            End If
        End Property

        Private Sub ToolTipChanged() Handles ToolTipText.OnPropertyLet
            Me.RootWindowElement.ToolTipChanged()
        End Sub

    #End Region
    
End Class