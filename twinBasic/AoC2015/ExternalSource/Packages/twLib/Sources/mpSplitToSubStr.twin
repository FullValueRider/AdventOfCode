Class mpSplitToSubStr
    Attribute VB_Name = "mpSplitToSubStr"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = False
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit


    Implements IMapper
    
    
    Private Const MY_TYPENAME           As String = "mpSplitToSubStr"
    
    
    Private Type State
        
        Separator                       As String
        Count                           As Long
        Compare                         As vbcomparemethod
        Conversion                      As SplitType
        
    End Type

    Private s                           As State

    
    Public Function ExecMapper(ByVal ipHostItem As Variant) As Variant Implements IMApper.ExecMapper
        If TypeInfo.IsNotString(ipHostItem) Then
            Return ipHostItem
        Else
            If s.Conversion = ToSeq Then
                Return Seq.Deb(VBA.Split(ipHostItem, s.Separator, s.Count, s.Compare))
            Else
                Return VBA.Split(ipHostItem, s.Separator, s.Count, s.Compare)
            End If
        End If
    End Function
    
    Private Sub Class_Initialize()
        ' Allows mpSPlit to be used without calling .Deb
        s.Separator = " "
        s.Count = -1
        s.Compare = vbBinaryCompare
    End Sub

    '@DefaultMember
    Public Function Deb _
    ( _
        Optional ByVal ipSplitType As SplitType = ToSeq, _
        Optional ByVal ipSeparator As String = " ", _
        Optional ByVal ipCount As Long = -1, _
        Optional ByVal ipCompare As VbCompareMethod = vbBinaryCompare _
    ) As mpSplitToSubStr
        With New mpSplitToSubStr
           Return .ConstructInstance(ipSplitType, ipSeparator, ipCount, ipCompare)
        End With
    End Function

    
    Friend Function ConstructInstance _
    ( _
        ByVal ipSplitType As SplitType = ToSeq, _
        ByVal ipSeparator As String = " ", _
        ByVal ipCount As Long = -1, _
        ByVal ipCompare As VbCompareMethod = vbBinaryCompare _
    ) As mpSplitToSubStr
        s.Conversion = ipSplitType
        s.Separator = ipSeparator
        s.Count = ipCount
        s.Compare = ipCompare
        Return Me
    End Function
    
    Public Property Get TypeName() As String Implements Imapper.TypeName
        Return MY_TYPENAME
    End Property
    
End Class
