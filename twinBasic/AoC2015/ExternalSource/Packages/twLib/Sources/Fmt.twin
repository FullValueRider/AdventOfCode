Class Fmt

	Option Explicit
    '@Folder("StringyStuff")
    '@PredeclaredId
    '@Exposed
    '@ModuleDescription("Enables limited sttring interpolation")

    '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    ' This module enables fields within strings which represent variables or
    ' formatting instructions
    '
    ' Variables are indicated by {x} where x is a positive integer.
    ' e.g.
    '       Fmt("this string {0} {1}", "Hello", 9)
    '
    ' gives 'this string Hello 9'
    '
    ' Layout fields are of the form {zzx}
    ' where zz can be
    '       nl = new line
    '       nt = newline followed by a tab
    '       tb = tab
    '       sq = single ordinary quote
    '       dq = double ordinary quote
    '       so = single smart quote - open
    '       sc = single smart quote - close
    '       do = double smart quote - open
    '       dc = double smart quote - close
    '       x  = the number of times a formatting character is repeated.
    '
    ' If no 'x' is provided then a single layout character is used
    ' For 'nt' the 'x' refers to the number of newlines.  Only a single tab is inserted
    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    ' Code line limit should be 120 characters.
    ' Comment line limit should be 80 characters
    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    'ToDo: This class is too complicated.  Ir would be simplet to split ipTemplate
    'into an array using '{' as the split at character
    ' as the split character.  This will then allow each field to be processed in a much more straighforward manner.
    ' messy characters - definitions
    ' Private Const DOUBLE_QUOTE                      As String = """"
    ' Private Const SINGLE_QUOTE                      As String = "'"
    ' Private Const SMART_SINGLE_QUOTE_OPEN           As String = "?" ' Alt+0145
    ' Private Const SMART_SINGLE_QUOTE_CLOSE          As String = "?" ' Alt+0146
    ' Private Const SMART_DOUBLE_QUOTE_OPEN           As String = "?" ' Alt+0147
    ' Private Const SMART_DOUBLE_QUOTE_CLOSE          As String = "?" ' Alt+0148

    ' required because, depending on usage,  an empty variant can be converted to
    ' nothing rather than an empty string
    'Private Const NoString                          As String = ""
    'Private Const NoFailMessage                     As String = "No error message was provided"

    Private Type State

        FormatFields                                As hkvp

    End Type

    Private s                                       As State


    'Field openers - definitions
    Private Const NEWLINES                           As String = "{nl"
    Private Const TABS                               As String = "{tb"
    Private Const NEWLINES_TAB                       As String = "{nt" ' 1 or more newlines followed by one Tab
    Private Const DQUOTE                             As String = "{dq"
    Private Const SQUOTE                             As String = "{sq"
    Private Const SMART_SQUOTE_OPEN                  As String = "{so"
    Private Const SMART_SQUOTE_CLOSE                 As String = "{sc"
    Private Const SMART_DQUOTE_OPEN                  As String = "{do"
    Private Const SMART_DQUOTE_CLOSE                 As String = "{dc"

    ' Field closures - definitions
    Private Const FIELD_COUNT_IS_NONE                   As String = "}"
    Private Const FIELD_COUNT_IS_ZERO               As String = "0}"
    Private Const FIELD_COUNT_IS_ONE                      As String = "1}"

    'Private Const DEFAULT_SEPARATOR                          As String = ","
    'Private Const DEFAULT_ARRAY_MARKUP                       As String = ",[]"
    Public Sub Class_Initialize()

            
        If s.FormatFields Is Nothing Then
            
            Set s.FormatFields = Hkvp.Deb
            
        Else
            
            Exit Sub
                
        End If
            
        With s.FormatFields
            
            .Add NEWLINES, vbCrLf                           ' {nl
            .Add TABS, vbTab                                ' {tb
            .Add NEWLINES_TAB, vbCrLf                       ' {nt
            .Add DQUOTE, Char.twPlainDQuote                 ' {dq
            .Add SQUOTE, Char.twPlainSQuote                 ' {sq
            .Add SMART_SQUOTE_OPEN, Char.twLSmartSQuote     ' {so
            .Add SMART_SQUOTE_CLOSE, Char.twRSmartSQuote    ' {sc
            .Add SMART_DQUOTE_OPEN, Char.twLSMartDQuote     ' {do
            .Add SMART_DQUOTE_CLOSE, Char.twRSmartDQuote    ' {dc
                
        End With
            
    End Sub

    '@Description("Converts the template and paramarray to a single string which is then sent to Debug.Print"}
    '@Ignore ProcedureNotUsed
    Public Sub Dbg _
    ( _
        ByVal ipFormatTemplate As String, _
        ParamArray ipParamArray() As Variant _
    )
        
        If VBA.Len(ipFormatTemplate) = 0 Then
            
            Debug.Print Stringifier.ToString(CVar(ipParamArray))
                
        Else
            
            Debug.Print GetFormattedParameters(ipFormatTemplate, CVar(ipParamArray))
                
        End If

    End Sub


    '@Description("Converts string with variable and layout fields to text"}
    '@Ignore ProcedureNotUsed
    Public Function Txt _
    ( _
        ByVal ipFormatTemplate As String, _
        ParamArray ipParamArray() As Variant _
    ) As String

        If VBA.Len(ipFormatTemplate) = 0 Then
                
            Return Stringifier.ToString(CVar(ipParamArray))
                
        Else
            
            Return GetFormattedParameters(ipFormatTemplate, CVar(ipParamArray))
                
        End If
        
    End Function


    ' Public Function TxtByVA _
    ' ( _
    '     ByVal ipFormatTemplate As String, _
    '     ByVal ipVA As varArray _
    ' ) As String

    '     If VBA.Len(ipFormatTemplate) = 0 Then
            
    '         ' Just get a comma separated list of the parameters
    '         TxtByVA = Stringifier.ToString(ipVA)
                
    '     Else
            
    '         ' Populate the fields in the string with parameters
    '         TxtByVA = GetFormattedParameters(ipFormatTemplate, ipVA)
                
    '     End If

    ' End Function


    

    Friend Function GetFormattedParameters(ByVal ipFormatTemplate As String, ByVal ipFPA As Variant) As String

        Dim myReturn  As String
        myReturn = ConvertFormatFieldXX0ToNoString(ipFormatTemplate)
        myReturn = ConvertFormatFieldWithNoCountToCountOfOne(myReturn)
        myReturn = ConvertFormatFieldWithCountToForAreSamearacters(myReturn)
        myReturn = ConvertVariableFieldsToStringRepresentations(myReturn, ipFPA)
            
        GetFormattedParameters = myReturn
            
    End Function

    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    '
    ' Methods below need to be made public for the test module to run correctly
    '
    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    '@Description("Replace formatting fields of the form '{XX0}' with NoString")
    Friend Function ConvertFormatFieldXX0ToNoString(ByVal ipLayoutTemplate As String) As String
    Attribute ConvertFormatFieldXX0ToNoString.VB_Description = "Replace formatting fields of the form '{XX0}' with NoString"

        Dim myLayoutTemplate                        As String
        Dim myItem                                  As Variant

        myLayoutTemplate = ipLayoutTemplate
            
        For Each myItem In s.FormatFields.Keys
            
            myLayoutTemplate = VBA.Replace(myLayoutTemplate, myItem & FIELD_COUNT_IS_ZERO, Char.twNoString)
                
        Next

        ConvertFormatFieldXX0ToNoString = myLayoutTemplate
            
    End Function

    '@Description("Convert non numbered LayoutObj.Format fields {XX} to {XX1}")
    '@Ignore AssignedByValParameter
    Friend Function ConvertFormatFieldWithNoCountToCountOfOne(ByVal ipFormatTemplate As String) As String
    Attribute ConvertFormatFieldWithNoCountToCountOfOne.VB_Description = "Convert non numbered LayoutObj.Format fields {XX} to {XX1}"

        Dim myItem                              As Variant

        For Each myItem In s.FormatFields.Keys
            
            ipFormatTemplate = VBA.Replace(ipFormatTemplate, myItem & FIELD_COUNT_IS_NONE, myItem & FIELD_COUNT_IS_ONE)
                
        Next
            
        ConvertFormatFieldWithNoCountToCountOfOne = ipFormatTemplate
            
    End Function

    '@Description("return the number in a format field")
    Friend Function GetRepeatCountForFormatField(ByRef ipFormatTemplate As String, ByVal ipFormatField As String) As Long
    Attribute GetRepeatCountForFormatField.VB_Description = "return the number in a format field"

        Dim myFormatFieldRepeatLocation         As Long
        Dim myRepeatCount                       As String

        myFormatFieldRepeatLocation = InStr(ipFormatTemplate, ipFormatField) + Len(ipFormatField)
            
        Do While VBA.Mid$(ipFormatTemplate, myFormatFieldRepeatLocation, 1) Like "#"
                
            myRepeatCount = myRepeatCount & VBA.Mid$(ipFormatTemplate, myFormatFieldRepeatLocation, 1)
            myFormatFieldRepeatLocation = myFormatFieldRepeatLocation + 1
                
        Loop
            
        GetRepeatCountForFormatField = CLng(myRepeatCount)
            
    End Function

    '@Description("Convert {XXn} layout field to fomatting characters 'XX' repeated 'n' times")
    Friend Function ConvertFormatFieldWithCountToForAreSamearacters(ByRef ipFormatTemplate As String) As String
    Attribute ConvertFormatFieldWithCountToForAreSamearacters.VB_Description = "Convert {XXn} layout field to fomatting characters 'XX' repeated 'n' times"

        Dim myItem                              As Variant
        Dim myReplace                           As String
        Dim myField                             As String
        Dim myCount                             As Long

        For Each myItem In s.FormatFields.Keys
                    
            If InStr(ipFormatTemplate, myItem) > 0 Then
                
                myCount = GetRepeatCountForFormatField(ipFormatTemplate, myItem)
                myField = myItem & CStr(myCount) & "}"
                myReplace = pvGetFormattingReplaceString(myItem, myCount)
                ipFormatTemplate = VBA.Replace(ipFormatTemplate, myField, myReplace)
                    
            End If
            
        Next
                    
        ConvertFormatFieldWithCountToForAreSamearacters = ipFormatTemplate
            
    End Function

    '@Description("Returns a string of formatting characters in line with the formatting tag")
    Friend Function pvGetFormattingReplaceString(ByVal ipFormatString As String, ByVal ipRepeatCount As Long) As String
    Attribute pvGetFormattingReplaceString.VB_Description = "Returns a string of formatting characters in line with the formatting tag"
            
        Dim myReturn                        As String

        myReturn = VBA.String$(ipRepeatCount, s.FormatFields.Item(ipFormatString))
        If ipFormatString = NEWLINES_TAB Then
            
            myReturn = myReturn & vbTab
            
        End If
            
        pvGetFormattingReplaceString = myReturn
            
    End Function

    '@Description("Replace each ocurrence of '{<number>}' with the corresponding stringified item from the parameters list")
    Friend Function ConvertVariableFieldsToStringRepresentations _
    ( _
        ByVal ipFormatTemplate As String, _
        ByVal ipFPA As Variant _
    ) As String
    Attribute ConvertVariableFieldsToStringRepresentations.VB_Description = "Replace each ocurrence of '{<number>}' with the corresponding stringified item from the parameters list"

        Dim myIndex                         As Variant
        Dim myReturn                        As String

        myReturn = ipFormatTemplate
            
        For myIndex = LBound(ipFPA) To UBound(ipFPA)
                    
            Dim myFind As String
            myFind = Char.twLCurly & CStr(myIndex) & Char.twRCurly
                
            Dim myReplace As String
            myReplace = Stringifier.ToString(ipFPA(myIndex))
                
            myReturn = VBA.Replace(myReturn, myFind, myReplace)

        Next
            
        ConvertVariableFieldsToStringRepresentations = myReturn
            
    End Function

End Class