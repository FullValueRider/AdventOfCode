Class Area

	Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Attribute VB_Description = "This class provides utilities for dealing with points in TableArrays"
    Option Explicit
   
    '@ModuleDescription("This class provides utilities for dealing with points in TableArrays")
    '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
    '========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C


    Public Enum SearchArea

        FourWay
        Eightway
            
    End Enum

    Public Enum RankOrientation

        ByFirst
        BySecondumn
            
    End Enum

    '@Description("Returns an array of valid coordinates based on the provided x,y coordinate and the available area.")
    Public Function GetAdjacentCoordinatesInArea _
    ( _
        ByVal ipFirst As Long, _
        ByVal ipFirstMin As Long, _
        ByVal ipFirstMax As Long, _
        ByVal ipSecond As Long, _
        ByVal ipSecondMin As Long, _
        ByVal ipSecondMax As Long, _
        ByVal ipType As SearchArea _
    ) As Variant
    Attribute GetAdjacentCoordinates.VB_Description = "Returns an array of valid coordinates based on the provided x,y coordinate and the available area."

        Dim myCoords As Seq = Seq.Deb
        If ipFirst - 1 >= ipFirstMin Then myCoords.Add Array(ipFirst - 1, ipSecond)
        If ipFirst + 1 <= ipFirstMax Then myCoords.Add Array(ipFirst + 1, ipSecond)
        If ipSecond - 1 >= ipSecondMin Then myCoords.Add Array(ipFirst, ipSecond - 1)
        If ipSecond + 1 <= ipSecondMax Then myCoords.Add Array(ipFirst, ipSecond + 1)
            
        If ipType = SearchArea.Eightway Then
            
            If ipFirst - 1 >= ipFirstMin And ipSecond - 1 >= ipSecondMin Then myCoords.Add Array(ipFirst - 1, ipSecond - 1)
            If ipFirst - 1 >= ipFirstMin And ipSecond + 1 <= ipSecondMax Then myCoords.Add Array(ipFirst - 1, ipSecond + 1)
            If ipFirst + 1 <= ipFirstMax And ipSecond - 1 >= ipSecondMin Then myCoords.Add Array(ipFirst + 1, ipSecond - 1)
            If ipFirst + 1 <= ipFirstMax And ipSecond + 1 <= ipSecondMax Then myCoords.Add Array(ipFirst + 1, ipSecond + 1)
            
        End If
            
        Return myCoords
            
    End Function
    
     '@Description("Returns an array of valid coordinates based on the provided x,y coordinate and the available area.")
    Public Function GetAdjacentCoordinatesInTable _
    ( _
        ByVal ipFirst As Long, _
        ByVal ipSecond As Long, _
        ByRef ipArray As Variant, _
        ByVal ipType As SearchArea _
    ) As Seq
    Attribute GetAdjacentCoordinates.VB_Description = "Returns an array of valid coordinates based on the provided x,y coordinate and the available area."

        Dim mySecondMin As Long = LBound(ipArray, 2)
        Dim mySecondMax As Long = UBound(ipArray, 2)
        Dim myFirstMin As Long = LBound(ipArray, 1)
        Dim myFirstMax As Long = UBound(ipArray, 1)
        Dim myCoords As Seq = Seq.Deb
        
        'Ignore out of bounds points
        If ipFirst < myFirstMin Or ipFirst > myFirstMax Then Return myCoords
        If ipSecond < mySecondMin Or ipSecond > mySecondMax Then Return myCoords
        
        ' The current point is within the bounds of ipArray
        ' look at horizontals and verticals
        If ipFirst - 1 >= myFirstMin Then myCoords.Add Array(ipFirst - 1, ipSecond)
        If ipFirst + 1 <= myFirstMax Then myCoords.Add Array(ipFirst + 1, ipSecond)
        If ipSecond - 1 >= mySecondMin Then myCoords.Add Array(ipFirst, ipSecond - 1)
        If ipSecond + 1 <= mySecondMax Then myCoords.Add Array(ipFirst, ipSecond + 1)
            
        If ipType = SearchArea.Eightway Then
            
            If ipFirst - 1 >= myFirstMin Then
            
                If ipSecond - 1 >= mySecondMin Then myCoords.Add Array(ipFirst - 1, ipSecond - 1)
                If ipSecond + 1 <= mySecondMax Then myCoords.Add Array(ipFirst - 1, ipSecond + 1)
                
            End If
           
            If ipFirst + 1 <= myFirstMax Then
                If ipSecond - 1 >= mySecondMin Then myCoords.Add Array(ipFirst + 1, ipSecond - 1)
                If ipSecond + 1 <= mySecondMax Then myCoords.Add Array(ipFirst + 1, ipSecond + 1)
                	
            End If
            
        End If
            
        Return myCoords
            
    End Function

    Public Function GetMoveCoordinates(ByVal ipType As SearchArea) As Hkvp

        Dim myDirections As Hkvp
        Set myDirections = Hkvp.Deb
            
        myDirections.AddPairs VBA.Split("N,E,S,W", Char.twComma), Array(Array(1, 0), Array(0, 1), Array(-1, 0), Array(0, -1))
          
            If ipType = SearchArea.Eightway Then
                myDirections.AddPairs VBA.Split("NE,NW,SW,SE", Char.twComma), Array(Array(1, 1), Array(1, -1), Array(-1, -1), Array(-1, 1))
            End If
            
        Set GetMoveCoordinates = myDirections

    End Function
    
     Public Function Coord(ByRef ipItem As Variant) As String
        Return Fmt.Txt("{0},{1}", ipItem(0), ipItem(1))
    End Function

End Class