Class Cops

	' This class provides a sort algorith using the Quicksort1 method found on vbForums
    'see https://www.vbforums.com/showthread.php?473677-VB6-Sorting-algorithms-(sort-array-sorting-arrays)&p=2909260#post2909260
    
    ' I did try Quicksort3 but found is crashed
    
    ' The class was written to sort arrays.  In practise it will sort any collection object that supports
    ' reading and writing via a defaulmembere.g. Object.member() can be writtten as Object().  e.g. this excludes VBA native Collection which requires
    ' an add after, remove to effectt an Item = statement
    
    ' at present we rely on VBA/twinBasic interna method for the >,=,< comparisons
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    
    Option Explicit
    
    Public Enum SortOrder
    	
        Ascending
        Descending
        
    End Enum
    
    
    Public Sub SortInPlace(ByRef ipSortable As Variant)
        
       ' Dim myS As Seq = Seq.Deb(ipArray)
        QuickSort1 ipSortable
            
        ' If ipSortOrder = Descending Then
        
        '     myS.Reverse
            
        ' End If
        
        ' Select Case True
        
        '     Case TypeInfo.IsAString(ipArray):               ipArray = myS.Join(vbNullString)
        '     Case TypeName(ipArray) = "Collection":            Set ipArray = myS.ToCollection
        '     Case TypeInfo.Group(OfItemByKeysForeach).HoldsKey(TypeInfo.BaseType(ipArray))
        
        ' End Select
    End Sub
    

    Private Sub QuickSort1(ByRef iopSortable As Variant, Optional ByVal ipLeft As Long, Optional ByVal ipRight As Long)
        Dim myFirst As Long
        Dim myLast As Long
        Dim myMid As Variant
        Dim mySwap As Variant


        Dim myExtent As Extent = Extent.Deb(iopSortable)

        Dim mySortable As Variant
        If VBA.IsArray(iopSortable) Then
            Set mySortable = ListArray.deb(iopSortable)
        Else
            Set mySortable = iopSortable
        End If


        If ipRight = 0 Then
            ipLeft = myExtent.FirstIndex(1) 'LBound(iopSortable)
            ipRight = myExtent.LastIndex(1) 'UBound(iopSortable)
        End If
        myFirst = ipLeft
        myLast = ipRight
        myMid = mySortable((ipLeft + ipRight) \ 2)
        Do
            Do While mySortable(myFirst) < myMid And myFirst < ipRight
                myFirst += 1
            Loop
            Do While myMid < mySortable(myLast) And myLast > ipLeft
                myLast -= 1
            Loop
            
            If myFirst <= myLast Then
            
                If VBA.IsObject(mySortable.Item(myFirst)) Then
                    Set mySwap = mySortable.Item(myFirst)
                    Set mySortable.Item(myFirst) = mySortable.Item(myLast)
                    Set mySortable.Item(myLast) = mySwap
                Else
                    mySwap = mySortable.Item(myFirst)
                    mySortable.Item(myFirst) = mySortable.Item(myLast)
                    mySortable.Item(myLast) = mySwap
                End If
                myFirst += 1
                myLast -= 1
            End If
        Loop Until myFirst > myLast
        If ipLeft < myLast Then
            QuickSort1 mySortable, ipLeft, myLast
        End If
        If myFirst < ipRight Then
            QuickSort1 mySortable, myFirst, ipRight
        End If
    End Sub

    Public Sub ReverseInPlace(ByRef ipReversible As Variant)

        Dim myExtent As Extent = Extent(ipReversible)
        
        Dim myReversible As Variant
        If myExtent.GroupType = OfArray Then
            If ArrayInfo.IsAnArray(ipReversible, AsListArray) Then
                Set myReversible = ListArray.deb(ipReversible)
        Else
                Exit Sub
            End If
            
        Else
        
            Set myReversible = ipReversible
        End If
        
        Dim mySourceIndex As Long
        Dim myDestIndex As Long = myExtent.LastIndex(1)
        
        Dim mySwapSource As Variant
        Dim mySwapDest As Variant
        
        For mySourceIndex = myExtent.FirstIndex(1) To (myExtent.LastIndex(1) + 1) \ 2
        
            If VBA.IsObject(ipReversible.item(mySourceIndex)) Then
                Set mySwapSource = ipReversible.item(mySourceIndex)
            Else
                mySwapSource = ipReversible.item(mySourceIndex)
            End If
            
            If VBA.IsObject(ipReversible.item(myDestIndex)) Then
                Set mySwapDest = ipReversible.item(myDestIndex)
            Else
                mySwapDest = ipReversible.item(myDestIndex)
            End If
            
            
            If VBA.IsObject(mySwapSource) Then
                Set ipReversible.Item(myDestIndex) = mySwapSource
            Else
                ipReversible.Item(myDestIndex) = mySwapSource
            End If
            
            If VBA.IsObject(mySwapDest) Then
                Set ipReversible.Item(mySourceIndex) = mySwapDest
            Else
                ipReversible.Item(mySourceIndex) = mySwapDest
            End If
            
            myDestIndex -= 1
            
        Next
        
    End Sub

    Public Function LHSOnly(ByRef ipLHS As IIndexed, ByRef ipRHS As IIndexed) As Variant

        Dim myResult As Seq = Seq.Deb
        Dim myH As IterItems = IterItems(ipLHS.Host)
        Do
            If ipRHS.LacksItem(myH.Item) Then
                myResult.Add myH.Item
            End If
            
        Loop While myH.MoveNext
        
        Return myResult
        
    End Function

    Public Function Both(ByRef ipLHS As IIndexed, ByRef ipRHS As IIndexed) As Variant

        Dim myResult As Seq = Seq.Deb
        Dim myLHS As IterItems = IterItems(ipLHS.Host)
        Do
            If ipRHS.HoldsItem(myLHS.Item) Then
                myResult.Add myLHS.Item
            End If
        Loop While myLHS.MoveNext

    End Function


    Public Function NotBoth(ByRef ipLHS As IIndexed, ByRef ipRHS As IIndexed) As Variant

        Return Seq.Deb(Me.LHSOnly(ipLHS, ipRHS)).Merge(LHSOnly(ipRHS, ipLHS))
        
    End Function

    Public Function Merge(ByRef ipLHS As IIndexed, ByRef ipRHS As IIndexed) As Variant

        Dim myresult As Seq = Seq.Deb(ipLHS.Host)
        Dim myI As IterItems = IterItems(ipRHS.Host)
        Do
        	DoEvents
            If myresult.LacksItem(myI.Item) Then
                myresult.Add myI.Item
            End If
        Loop While myI.MoveNext
        Return myresult
    End Function
    
End Class