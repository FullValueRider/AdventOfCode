Class Ranges

    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True

    Option Explicit

    'supertceded by seq.deb.repeat
    ' Public Function GetNumberSeries(ByVal ipStart As Variant, ByVal ipCount As Long, Optional ByVal ipStep As Variant = 1) As Variant

    '     Dim myArray As Variant
    '     myArray = Empty
    '     GetNumberSeries = myArray
            
    '     If TypeInfo.IsNotNumber(ipStart, ipCount, ipStep) Then Exit Function
        
    '     ReDim myArray(0 To ipCount - 1)
    '     Dim myIndex As Long
    '     For myIndex = 0 To ipCount - 1
            
    '         myArray(myIndex) = ipStart
    '         ipStart = ipStart + ipStep
                
    '     Next
        
    '     GetNumberSeries = myArray
            
    ' End Function

    ' '@Description("Return an array of length ipCount populated with ipItem")
    ' Public Function GetItemSeries(ByVal ipCount As Long, ByVal ipItem As Variant) As Variant
    '     Return Seq.Deb.Repeat(ipItem, ipCount).ToArray
    ' End Function


    Public Function IsInRange(ByVal ipTestItem As Variant, ByVal ipLowerBound As Variant, ByVal ipUpperBound As Variant) As Boolean
        
        If BailOut.When(TypeInfo.IsNotNumber(ipTestItem), IsNotNumber) Then Return False
        If BailOut.When(TypeInfo.IsNotNumber(ipLowerBound), IsNotNumber) Then Return False
        If BailOut.When(TypeInfo.IsNotNumber(ipUpperBound), IsNotNumber) Then Return False
        
        If (ipTestItem < ipLowerBound) Or (ipTestItem > ipUpperBound) Then Return False
        Return True
    End Function


    Public Function IsNotInRange(ByVal ipTestItem As Variant, ByVal ipLowerBound As Variant, ByVal ipUpperBound As Variant) As Boolean
        IsNotInRange = False
        If BailOut.When(TypeInfo.IsNotNumber(ipLowerBound, ipUpperBound), IsNotNumber) Then Exit Function
        If (ipTestItem >= ipLowerBound) And (ipTestItem <= ipUpperBound) Then Exit Function
        IsNotInRange = True
    End Function


    ' '@Description("Takes any iterable or string. The startindex and endindex should be specified using a 1 based index. The result.items lyst returns the startindex based on the actual indexing used by the iterable")
    '  Friend Function TryStartRunFromAnyStartRunEnd _
    ' ( _
    '     ByVal ipItem As Variant, _
    '     Optional ByVal ipNormStart As Variant, _
    '     Optional ByVal ipRun As Variant, _
    '     Optional ByVal ipNormEnd As Variant, _
    '     Optional ByVal ipRank As PresetOrd = PresetOrd.ArrayFirstRank _
    ' ) As Boolean
    ' Attribute TryStartRunFromAnyStartRunEnd.VB_Description = "Takes any iterable or string. The startindex and endindex should be specified using a 1 based index. The result.items lyst returns the startindex based on the actual indexing used by the iterable"
        
    '     ' Item must be an entity that has an extent, i.e. an iterable or a string
    '     ' ipNormStart , ipNormEnd and ipRun may be negative
    '     '
    '     ' There are 7 scenarios
    '     '   1. No params
    '     '   2. Start only
    '     '   3. Run only
    '     '   4. End only
    '     '   5. Start and Run, Start and Run and End (end is ignored when start and run are provided)
    '     '   6. Start and End
    '     '   7. Run and End
    '     '
    '     ' Where coercion is used a message is retuned about the coercion applied
    '     '
    '     '  To simplify calculations the first and last indexes of each rank of Item are normalised
    '     ' such that the first index is 1

    '     Res.Reset 'NotOkay
    '     TryStartRunFromAnyStartRunEnd = False

    '     Dim myItem As Box
    '     Set myItem = Box(ipItem)

    '     Dim myItemExtents() As Rank
    '     ReDim myItemExtents(1 To myItem.Extent.RankCount)
    
    '     Dim myRank As Long
    '     For myRank = 1 To myItem.Extent.RankCount

    '         Set myItemExtents(myRank) = Rank(1, myItem.Extent(myRank).LastIndex - myItem.Extent(myRank).FirstIndex + 1)


    '     Next

    '     ' Now focus on the specific rank where myRankIndex is an index into myItemExtents
    '     Dim myRankIndex As Long
    '     If ipRank < 1 Then
        
    '         myRankIndex = enums.Preset.Value(ArrayFirstRank)
    '         Res.SetOkay MsgOrd.RankOfZeroResetToOne

    '     Else

    '         myRankIndex = ipRank

    '     End If


    '     ''''**** got to here
    '     Dim myInputExtent As Rank
        
        
        
    '     If Not VBA.IsMissing(ipRun) Then

    '         If BailOut.When(ipRun = 0, RunLengthIsZero) Then Exit Function


    '     End If
            
    '     ' Ensure a legal start index
    '     If Not VBA.IsMissing(ipNormStart) Then
                
    '         If BailOut.When(VBA.Abs(ipNormStart) > myItem.Extent(myRank).Count, StartIndexExceedsItemCount) Then Exit Function
                    
    '         ' This is an intervention because we define start runs as starting from 1 or -1
    '         ' so zero is not an allowed value but is taken to mean 1
    '         If ipNormStart = 0 Then
                    
    '             ipNormStart = 1
    '             '@Ignore FunctionReturnValueDiscarded
    '             Res.SetOkay StartIndexWasZeroResetToOne
                    
                
    '         End If
                
    '     End If
            
    '     ' Ensure a legal end index
    '     If Not VBA.IsMissing(ipNormEnd) Then
                
    '         If VBA.Abs(ipNormEnd) > myItem.Extent(myRank).LastIndex Then
    '             ' intervention to reset end index
    '             ipNormEnd = myItem.Extent(myRank).LastIndex * VBA.Sgn(ipNormEnd)
    '             '@Ignore FunctionReturnValueDiscarded
    '             Res.SetOkay EndIndexResetToCount
        

    '         End If

    '     End If
        
    '     Dim mySelector As String
    '     If Not VBA.IsMissing(ipNormStart) Then mySelector = mySelector & "S"
    '     If Not VBA.IsMissing(ipRun) Then mySelector = mySelector & "R"
    '     If Not VBA.IsMissing(ipNormEnd) Then mySelector = mySelector & "E"

    '     Select Case mySelector
            
    '         Case "SRE", "SR"
                
    '             DeduceStartRunFromAnyStartRun ipNormStart, ipRun, myRank, myItem
                        
                    
    '         Case "SE"
                    
    '             DeduceStartRunFromAnyStartEnd ipNormStart, ipNormEnd, myRank, myItem
                        
                    
    '         Case "S"
                    
    '             DeduceStartRunFromAnyStartOnly ipNormStart, myRank, myItem
                        
                    
    '         Case "R"
                    
    '             DeduceStartRunFromAnyRunOnly ipRun, myRank, myItem
                        
                    
    '         Case "E"
                    
    '             DeduceStartRunFromAnyEndOnly ipNormEnd, myRank, myItem
                

    '         Case "RE"
                        
    '             DeduceStartRunFromAnyRunEnd ipRun, ipNormEnd, myRank, myItem
                
                    
    '         Case ""
                    
    '             DeduceStartRunFromNoStartRunOrEnd myRank, myItem
                        
                    
    '     End Select
            
    '     'iopResult.Item(ResultItemsEnums.StartRun(srStartIndex)) = iopResult.Item(ResultItemsEnums.StartRun(srStartIndex)) + myFirstIndex - 1
    '      TryStartRunFromAnyStartRunEnd = True
    '      Res.SetOkay
    ' End Function

    ' friend Function ValidateStartRunEnd _
    ' ( _
    '     ByRef ipIterable As Box, _
    '     ByVal ipStart As Long, _
    '     ByVal ipRun As Long, _
    '     ByVal ipEnd As Long _
    ' ) As Boolean
    '     ValidateStartRunEnd = False
        
    '     ' Start must be within bounds
    '     ValidateStartRunEnd = True
    ' End Function
        

    ' Friend Sub DeduceStartRunFromAnyStartRun _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipRun As Long, _
    '     ByVal ipRank As Long, _
    '     ByRef ipEnumerator As Enumerator _
    ' )
            
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
    '     If ipNormStart > 0 And ipRun > 0 Then
                
    '         If ipNormStart + ipRun - 1 <= ipEnumerator.Count(ipRank) Then
                    
    '             myRun = ipRun
    '             myStartIndex = ipNormStart + ipEnumerator.FirstIndex(ipRank) - 1
                                    
    '         Else
                    
    '             myRun = ipEnumerator.Count(ipRank) - ipNormStart + 1
    '             myStartIndex = ipNormStart
    '             Res.SetOkay RunLengthTooLong
                    
                    
    '         End If
                
    '     ElseIf ipNormStart > 0 And ipRun < 0 Then
                
    '         If ipNormStart + ipRun + 1 > 0 Then
                    
    '             myStartIndex = ipEnumerator.FirstIndex
    '             myRun = VBA.Abs(ipRun)
                    
    '         Else
                    
    '             myStartIndex = 1
    '             myRun = ipNormStart
    '             Res.SetOkay RunLengthTooLong
                    
    '         End If
                
                
    '     ElseIf ipNormStart < 0 And ipRun > 0 Then
                
    '         myStartIndex = ipEnumerator.LastIndex(ipRank) + ipNormStart + 1
    '         If myStartIndex + ipRun - 1 <= ipEnumerator.Count(ipRank) Then
                    
    '             myRun = ipRun
                    
    '         Else
                    
    '             myRun = ipEnumerator.Count(ipRank) - myStartIndex + 1
    '             Res.SetOkay RunLengthTooLong
                    
                    
    '         End If
                
    '     Else                                         ' ipNormStart <0 and ipRun <0 then
                
    '         myStartIndex = ipEnumerator.LastIndex(ipRank) + ipNormStart + 1
    '         If myStartIndex + Abs(ipRun) + 1 > 0 Then
                    
    '             myStartIndex = myStartIndex + ipRun + 1
    '             myRun = VBA.Abs(ipRun)
                    
    '         Else
                    
    '             myStartIndex = 1
    '             myRun = ipEnumerator.Count(ipRank) - myStartIndex + 1
                    
    '         End If
                
                
    '     End If
            
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '      '@Ignore FunctionReturnValueDiscarded
    '      Res.Reset.SetItems myStartIndex, myRun '(Okay)
            
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyStartEnd _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipNormEnd As Long, _
    '     ByVal ipRank As Long, _
    '     ByRef ipExtent As Enumerator _
    ' )
                
    '     Dim myStartIndex As Long
    '     Dim myEndIndex As Long
    '     Dim myRun As Long
                
    '     '@Ignore IIfSideEffect
    '     '@Ignore IIfSideEffect
    '     myStartIndex = IIf(ipNormStart > 0, ipNormStart + ipExtent.FirstIndex(ipRank) - 1, ipExtent.LastIndex(ipRank) + ipNormStart + 1)
    '     '@Ignore IIfSideEffect
    '     '@Ignore IIfSideEffect
    '     myEndIndex = IIf(ipNormEnd > 0, ipNormEnd + ipExtent.FirstIndex(ipRank) - 1, ipExtent.LastIndex(ipRank) + ipNormEnd + 1)
                
    '     If myStartIndex < myEndIndex Then
                    
    '         myRun = myEndIndex - myStartIndex + 1
                    
    '     Else
                    
    '         myRun = myStartIndex - myEndIndex + 1
    '         myStartIndex = myEndIndex
                    
    '     End If
                
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)
                
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyStartOnly _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipRanks As Long, _
    '     ByRef ipExtent As Enumerator _
    ' )

    '     Dim myStartIndex As Long
    '     Dim myRun  As Long
    '     If ipNormStart > 0 Then
                
    '         myStartIndex = ipExtent.FirstIndex + ipNormStart - 1
    '         myRun = ipExtent.Count - ipNormStart + 1
                
    '     Else
            
    '         myStartIndex = ipExtent.LastIndex + ipNormStart + 1
    '         myRun = VBA.Abs(ipNormStart)
                
    '     End If

    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)

    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyRunOnly(ByVal ipRun As Long, ByVal ipRank As Long, ByRef ipExtent As Enumerator)
                
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
        
    '     If ipRun > 0 Then
        
    '       myStartIndex = ipExtent.FirstIndex(ipRank)
    '       myRun = ipRun
        
        
    '     Else
                
    '       myStartIndex = ipExtent.LastIndex + ipRun + 1
    '       myRun = VBA.Abs(ipRun)
                
                
    '     End If
            
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun 'Okay)
            
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyEndOnly(ByVal ipNormEnd As Long, ByVal ipRank As Long, ByRef ipEnumerator As Enumerator)
            
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
                
    '     If ipNormEnd > 0 Then
            
    '       myStartIndex = ipEnumerator.FirstIndex(ipRank)
    '       myRun = ipNormEnd
            
                
    '     Else
        
    '       myStartIndex = ipEnumerator.FirstIndex(ipRank)
    '       myRun = ipEnumerator.Count(ipRank) + ipNormEnd + 1
                
                
    '     End If
            
    '     ' Adjust startindex to align witth the true first index
            
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)
            
    ' End Sub


    ' '@Ignore EmptyMethod
    ' 'need to add code ignore for now
    ' Friend Sub DeduceStartRunFromAnyRunEnd(ByVal ipRun As Long, ByVal ipNormEnd As Long, ByVal ipRamk As Long, ByVal myExtent As Enumerator)
    '     'To add code
    ' End Sub


    ' Friend Sub DeduceStartRunFromNoStartRunOrEnd(ByVal ipRank As Long, ByRef ipExtent As Enumerator)
            
    '     ' Dim myFirstIndex As Long
    '     ' myFirstIndex = ipEnumerator.FirstIndex
            
    '     ' Dim myRun As Long
    '     ' myRun = iopExtent.Item(ResultItemsEnums.Iterator(ieCount))
            
    '     ' Adjust startindex to align witth the true first index
    '     'myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.SetOkay.SetItems ipExtent.FirstIndex(ipRank), ipExtent.Count(ipRank)

    ' End Sub

    ' '@Description("Returns the specified subrange in Item(0) of the result")
    ' Public Function TryRange _
    ' ( _
    '     ByVal ipIterable As Variant, _
    '     Optional ByVal ipNormStart As Variant, _
    '     Optional ByVal ipRun As Variant, _
    '     Optional ByVal ipNormEnd As Variant, _
    '     Optional ByVal ipRank As Variant _
    ' ) As Result
    ' Attribute TryRange.VB_Description = "Returns the specified subrange in Item(0) of the result"
    
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.SetOkay
    '     Set TryRange = Res
    '     Dim myRank As Long
    '     If VBA.IsMissing(ipRank) Then myRank = enums.Preset.Value(ArrayFirstRank) Else myRank = ipRank
            
    '     If Me.TryStartRunFromAnyStartRunEnd(ipIterable, ipNormStart, ipRun, ipNormEnd, myRank) Then Exit Function
    
            
    '     'get startrun
    '     Dim myRangeStartRun As ResultStartRun
    '     Set myRangeStartRun = Res.Items
        
    '    Dim myColl As Collection
    '    Set myColl = New Collection
    
    '     'ToDo: Check if this loop adequatly deals with stacks and queues
    '     Dim myIndex As Long
    '     For myIndex = myRangeStartRun.StartIndex To myRangeStartRun.LastIndex
            
    '        myColl.Add ipIterable(myIndex)
                
    '     Next
        
    '     Set Res.Items.Item(1) = myColl
    '     Set TryRange = Res.SetOkay
        
    ' End Function


    ' Public Function GetIterantFromAnyStartRunEnd _
    ' ( _
    '     ByVal ipFirst As Long, _
    '     ByVal ipLast As Long, _
    '     Optional ByVal ipStart As Variant = Empty, _
    '     Optional ByVal ipRun As Variant = Empty, _
    '     Optional ByVal ipStop As Variant = Empty _
    ' ) As Iterant

    '     If VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '         GetIterantFromAnyStartRunEnd = DecodeIterantFromFirstLast(ipFirst, ipLast)
            
            
    '     ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And (Not VBA.IsEmpty(ipStop)) Then
        
    '         GetIterantFromAnyStartRunEnd = DecodeIterantFromStop(ipFirst, ipLast, ipStop)
            
            
    '     ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
            
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
            
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    
    ' End If

    ' End Function

    ' Friend Function DecodeIterantFromFirstLast(ByVal ipFirst As Long, ByVal ipLast As Long) As Iterant
        
    '     Dim myIterant As Iterant
    '     Set myIterant = Iterant.Deb
    '     With myIterant
        
    '         .Start = ipFirst
    '         .Stop = ipLast
    '         If .Start <.Stop Then
                
    '             .Count = Abs(.Stop -.Start + 1)
    '             .Step = 1
    '         Else
                
    '             .Count = Abs(.Start - .Stop + 1)
    '             .Step = -1
    '         End If
            
    '     End With
        
    '     Set DecodeIterantFromFirstLast = myIterant
        
    ' End Function

    ' Friend Function DecodeIterantFromStop(ByVal ipFirst As Long, ByVal iplast As Long, ByVal ipStop As Long) As Iterant
        
    '     Dim myIterant As Iterant
    '     Set myIterant = Iterant.Deb
        
    '     Dim myFirst As Long
    '     ' Dim myLast As Long
    '     ' Dim myStop As Long
        
    '     ' 'rebase so First = 1
    '     ' myFirst = 0
    '     ' myLast = iplast - ipFirst
    '     ' myStop = ipStop - ipFirst
        
    '     ' If myStop < myFirst Then myStop = myFirst
    '     ' If myStop > myLast Then myStop = myLast
        


    '     With myIterant
        
        
    '         .Stop = ipStop
    '         .Start = ipFirst
    '         If ipFirst < iplast Then
                
                
    '             .Count = Abs(ipStop - ipFirst) + 1
    '             .Step = 1
    '         Else
                
            
    '             .Count = Abs(ipFirst - ipStop) + 1
    '             .Step = -1
    '         End If
            
    '     End With
        
        
        
    '     Set DecodeIterantFromStop = myIterant
    ' End Function
        /*  When defining the input/outputs for ResolveStartRunIndex we have to first convert to a normalised indexing.
            This transformation is dictated by the disire to allow Indexes and runs for object in the library to be 
            specified as positive or negative numbers
            e.g.
            A start index of two is two items in from the first index
            A start index of minus two is two items in from the Last index
            The FirstIndex is always specified as 1
            The Negative first index is always specified as -1
            0 as a first or last index is an illegal normalised index.
            
            FirstIndex and LastIndex are terms used for the indexes of the first and last items in a collection object/array.
            
            The output of ResolveStartEndRun is three item array
            
            Item 0: The positive normalised start index (note not first index)
            Item 1: The Native positive start index
            Item 3: The positive run 
            For Item 1 and 2 -ipNormStart +iprun -1 = ipNormEnd in the respective indexing system
        */ 
            
      '@Description("In this Library Indexing and Runs may be specified to be din the Library allows negative values to be specified. _
        StartEndRun returns values for startIndex based on the first index, and positive displacement run. _
         Run is ignored if start and End are provided.  _
         StartIndex is normalised based on a starting index of 1. _
         To convert to the native indexing use Firstindex - startindex+1")
         
         
'=======================================================================================
    '     Public Function ResolveStartEndRun _
    '     ( _
    '         ByVal ipNativeFirst As Long, _
    '         ByVal ipNativeLast As Long, _
    '         Optional ByVal ipNormStart As Variant = Empty, _
    '         Optional ByVal ipNormEnd As Variant = Empty, _
    '         Optional ByVal ipRun As Variant = Empty _
    '     ) As Variant
        
    '         Dim mycase As Long = 7
    '         If VBA.IsEmpty(ipNormStart) Then
    '             mycase = mycase And 3
    '         Else
    '             ipNormStart = GetPositiveStartIndex(ipNativeFirst, ipNativeLast, VBA.CLng(ipNormStart))
    '         End If
        
    '         If VBA.IsEmpty(ipNormEnd) Then
    '             mycase = mycase And 5
    '         Else
    '             ipNormEnd = GetPositiveEndIndex(ipNativeFirst, ipNativeLast, VBA.CLng(ipNormEnd))
    '         End If
            
    '         If VBA.IsEmpty(ipRun) Then
    '             mycase = mycase And 6
    '         Else
    '             ipRun = GetPositiveStartIndex(ipNativeFirst, ipNativeLast, VBA.CLng(ipRun))
    '         End If
            
    '         ' at this point we know which parameters have been provided and that all parameters (if not emprty)
    '         ' do not exceed the first and last index values.
    '         Dim myResult As Variant
    '         Select Case mycase
            
    '             Case 0                          ' ipNormStart, ipNormEnd and ipRun are empty
                
    '                 myResult = Array(ipNativeFirst, 1, ipNativeLast - ipNativeFirst + 1)
                    
    '             Case 1                          ' ipNormStart and ipendendindex are empty
                
    '                 myResult = ResolveEmptyEmptyRun(ipNativeFirst, ipNativeLast, ipRun)
                    
    '             Case 2
                
    '                 myResult = ResolveEmptyEndEmpty(ipNativeFirst, ipNativeLast, ipNormEnd)
                    
    '             Case 3
                
    '                 myResult = ResolveEmptyEndRun(ipNativeFirst, ipNativeLast, ipNormEnd, ipRun)
                
    '             Case 4
                
    '                 myResult = ResolveStartEmptyEMpty(ipNativeFirst, ipNativeLast, ipNormStart)
                    
    '             Case 5
                
    '                 myResult = ResolvestartEmptyrun(ipNativeFirst, ipNativeLast, ipNormStart, ipRun)
                
    '             Case 7, 6 ' we ignore run if end is provided so 7 and 6 are the same solution
                
    '                 Return resolveStartEndEmpty(ipNativeFirst, ipNativeLast, ipNormStart, ipNormEnd)
                    
    '             End Select
                
    '             Return myResult
            
    '     End Function

    ' '@Description("Returns a run size that fits in FirstIndex to LastIndex")
    ' Friend Function GetPositiveRunSize(ByVal ipNativeFirst As Long, ipNativeLast As Long, ByVal iprun As Long) As Long

    '     If iprun = 0 Then
    '         Err.Raise 17, "Ranges.FitRunSize", "Run cannot be zero"
    '     End If
        
    '     Dim myNativeRun As Long = ipNativeLast - ipNativeFirst + 1
        
    '     If VBA.Abs(iprun) > myNativeRun Then
        
    '         Return VBA.Sgn(iprun) * myNativeRun
        
    '     Else
        
    '         Return iprun
            
    '     End If
        
    ' End Function

    ' ' For StartIndex and EndIndex
    ' ' The Norm input must be as normqlised indexes
    ' ' this ensures that 'collection 'objects with different bounds can be treated in the same manner
    ' ' the objective of StartEndRun is to return a native index for use by 
    ' ' the internal workings of the library.
   
    ' Friend Function GetPositiveStartIndex(ByVal ipNativeFirst As Long, ByVal ipNativeLast As Long, ipNormStart As Long) As Long

    '     Dim myNativeStart As Long
    
    '     If ipNormStart = 0 Then
    '         Return ipNativeFirst
    '     ' Else
    '     '     myNativeStart = ipNativeFirst + ipNormStart - 1
    '     End If
        
        
    '     If ipNormStart < 0 Then
    '         myNativeStart = ipNativeLast + ipNormStart + 1
    '     Else
    '         myNativeStart = ipNativeFirst + ipNormStart - 1
    '     End If
        
        
    '     ' If VBA.Abs(myNativeStart) > ipNativeLast Then
        
    '     '     Return VBA.Sgn(ipNormStart) * ipNativeLast
        
    '     ' Else
            
    '     '     Return myNativeStart
            
    '     ' End If
        
    ' End Function


    ' Friend Function GetPositiveEndIndex(ByVal ipNativeFirst As Long, ipNativeLast As Long, ipNormEnd As Long) As Long

    '     Dim myNativeEnd As Long
    '     If ipNormEnd = 0 Then
    '         Return ipNativeFirst
    '     ' Else
    '     '     myNativeEnd = ipNativeFirst - ipNormEnd - 1
    '     End If
        
    '     If ipNormEnd < 0 Then
    '         myNativeEnd = ipNativeFirst - ipNormEnd + 1
    '     Else
    '         myNativeEnd = ipNativeLast + ipNormEnd - 1
    '     End If
        
    '     ' If VBA.Abs(ipNormEnd) > ipNativeLast Then
        
    '     '     Return VBA.Sgn(ipNativeLast) * ipNativeLast
        
    '     ' Else
            
    '     '     Return ipNormEnd
            
    '     ' End If
        
    ' End Function

    ' Friend Function ResolveEmptyEmptyRun(ByVal ipNativeFirst As Variant, ByVal ipNativeLast As Variant, ByVal ipRun As Variant) As Variant


    '     Dim myresult(0 To 2) As Long
        
    '     If ipRun < 0 Then
        
    '         opStartIndex = ipNativeLast + ipRun + 1
    '         opRun = VBA.Abs(ipRun)
            
            
    '     Else
            
    '         opStartIndex = ipNativeFirst
    '         opRun = ipRun
            
            
    '     End If
            
    '         Return myresult
            
    ' End Function



    ' Friend Function ResolveEmptyEndEmpty _
    ' ( _
    '     ByVal ipNativeFirst As Variant, _
    '     ByVal ipNativeLast As Variant, _
    '     ByVal ipNormEnd As Variant _
    ' ) As Variant
        
    '     Dim myresult(0 To 2) As Long
        
    '     Dim myEndIndex As Long
    '     If ipNormEnd < 0 Then
        
    '         myEndIndex = ipNativeLast + ipNormEnd + 1
            
            
    '     Else
        
    '        myEndIndex = ipNormEnd
            
            
    '     End If
        
    '     opStartIndex = ipNativeFirst
    '     opRun = myEndIndex - ipNativeFirst + 1
        
    '     Return myresult
        
    ' End Function

    ' Friend Function ResolveStartEmptyEMpty _
    ' ( _  
    '     ByVal ipNativeFirst As Variant, _
    '     ByVal ipNativeLast As Variant, _
    '     ByVal ipNormStart As Variant, _
    '     ByRef opStartIndex As Long, _
    '     ByRef opRun As Long _
    ' ) As Variant

    '     Dim myresult(0 To 2) As Long
        
    '     If ipNormStart < 0 Then
        
    '         opStartIndex = ipNativeLast + ipNormStart + 1
    '         opRun = VBA.Abs(ipNormStart)
    '     Else
        
    '         opStartIndex = ipNormStart
    '         opRun = ipNativeLast - ipNormStart + 1
                
    '     End If
            
    '         Return myresult
            
    ' End Function

    ' Friend Function ResolvestartEmptyrun _
    ' ( _
    '     ByVal ipNativeFirst As Variant, _
    '     ByVal ipNativeLast As Variant, _
    '     ByVal ipNormStart As Variant, _
    '     ByVal ipRun As Variant _
    ' ) As Variant

    '     Dim myresult(0 To 2) As Long
        
    '     If ipNormStart < 0 Then
        
    '         opStartIndex = ipNativeLast + ipNormStart + 1
    '     Else
            
    '         opStartIndex = ipNormStart
    '     End If
    '     Dim myEndIndex As Long
    '     If ipRun < 0 Then
        
    '         myEndIndex = opStartIndex
    '         opStartIndex = opStartIndex + ipRun + 1
    '         If opStartIndex < 1 Then opStartIndex = ipNativeFirst
    '         opRun = myEndIndex - opStartIndex + 1
    '     Else
            
    '         myEndIndex = opStartIndex + ipRun
    '         If myEndIndex > ipNativeLast Then
    '             myEndIndex = ipNativeLast
    '         End If
            
    '         opRun = myEndIndex - opStartIndex + 1
    '     End If
        
        
    '     Return myresult
        
    ' End Function

    ' Friend Function resolveStartEndEmpty _
    ' ( _
    '     ByVal ipNativeFirst As Variant, _
    '     ByVal ipNativeLast As Variant, _
    '     ByVal ipNormStart As Variant, _
    '     ByVal ipNormEnd As Variant _
    ' ) As Variant

    '     Dim myresult(0 To 2) As Long
        
    '     If ipNormStart < 0 Then
    '         opStartIndex = ipNativeLast + ipNormStart + 1
    '     Else
    '         opStartIndex = ipNormStart
    '     End If
        
    '     Dim myEndIndex As Long
    '     If ipNormEnd < 0 Then
    '         myEndIndex = ipNativeLast + ipNormEnd + 1
    '     Else
    '         myEndIndex = ipNormEnd
    '     End If
        
    '     Dim myTmp As Long
    '     If opStartIndex > myEndIndex Then
            
    '         opRun = opStartIndex - myEndIndex + 1
    '         opStartIndex = myEndIndex
    '     Else
    '         opRun = myEndIndex - opStartIndex + 1
            
    '     End If
        
    '     Return myresult
        
    ' End Function


    ' Friend Function ResolveEmptyEndRun _
    ' ( _
    '     ByVal ipNativeFirst As Variant, _
    '     ByVal ipNativeLast As Variant, _
    '     ByVal ipNormEnd As Variant, _
    '     ByVal ipRun As Variant _
    ' ) As Variant
        
    '     Dim myresult(0 To 2) As Long
        
    '     Dim myendindex  As Long
    '     If ipNormEnd < 0 Then
        
    '         myendindex = ipNativeLast + ipNormEnd + 1
            
            
    '     Else
        	
    '         myendindex = ipNormEnd
            
            
    '     End If
        
    '     'ipRun = -ipRun
    '     ' run is relative to the end index but specifies the last character
    '     ' i.e. 3 is 3 befoe last index
    '     ' -3 is 3 after last index
        
    '      If ipRun < 0 Then
        
    '         opStartIndex = myendindex
    '         myendindex = myendindex - ipRun - 1
    '         If myendindex > ipNativeLast Then
    '             myendindex = ipNativeLast
    '         End If
            
            
    '     Else
            
    '         opStartIndex = myendindex - ipRun
    '         If opStartIndex < ipNativeFirst Then
    '             opStartIndex = ipNativeFirst
    '         End If
            
            
    '     End If
        
    '     opRun = myendindex - opStartIndex + 1
        
    '     Return myresult
        
    ' End Function
    
End Class